### data preparation and descriptives
# ************************************************
source("packages.r")
source("functions.r")
### prepare data --------------------------------------------
# import historical data
load("./data/election_dates.RData")
election_date
election_year
ger_df <- read_dta("./data/ger_nat.dta")
# corrections of government variables
ger_df$spd_gov[ger_df$year == 1965] <- 1
ger_df$fdp_gov[ger_df$year == 1980] <- 1
ger_df$spd_gov[ger_df$year == 2005] <- 1
# add vote shares for others
ger_df$npd_share <- NULL
ger_df$npd_seats <- NULL
ger_df <- mutate(ger_df, oth_share = 100 - cdsu_share - spd_share - fdp_share - gru_share - lin_share - afd_share)  # create voteshare for others
# make df long
ger_df_long <- select(ger_df, ends_with("_share"), year) %>%
select(-contains("gov_share")) %>%
gather(key = "party", value = "voteshare")
voteshare_vars <- str_subset(names(ger_df), "^(?!.*gov).*_share$")
gov_vars <- str_subset(names(ger_df), "_gov$")
ger_df_long <- melt(ger_df, id.vars = c("year", "turnout", "chancellor", "unemp", "chancellor_polls", "term", gov_vars) , measure.vars = voteshare_vars, value.name = "voteshare")
ger_df_long <- rename(ger_df_long, party = variable)
# gen party id
ger_df_long$party <- str_extract(ger_df_long$party, "[:alpha:]+")
ger_df_long$party <- str_replace(ger_df_long$party, "cdsu", "cdu")
# gen election id
elections_df <- data.frame(year = unique(ger_df_long$year), election = seq_along(unique(ger_df_long$year)))
ger_df_long <- merge(ger_df_long, elections_df, by = c("year"), all.x = TRUE)
# gen lag vars
ger_df_long <- group_by(ger_df_long, party) %>% arrange(year) %>% mutate(voteshare_l1 = lag(voteshare, 1), voteshare_l2 = lag(voteshare, 2), voteshare_l3 = lag(voteshare, 3), chancellor = lag(chancellor, 1), unemp_l1 = lag(unemp, 1))
# generate swing variable
ger_df_long$swing <- ger_df_long$voteshare - ger_df_long$voteshare_l1
ger_df_long <- group_by(ger_df_long, party) %>% arrange(year) %>% mutate(swing_l1 = lag(swing, 1))
# gen chancellor party indicator
ger_df_long$chancellor_party <- ifelse(ger_df_long$party == ger_df_long$chancellor, 1, 0)
# gen major party indicator
ger_df_long$major <- ifelse(ger_df_long$party == "spd" | ger_df_long$party == "cdu", 1, 0)
# gen government-opposition indicator
ger_df_long <- group_by(ger_df_long, party) %>% arrange(year) %>% mutate(cdsu_gov = lag(cdsu_gov, 1), spd_gov = lag(spd_gov, 1), fdp_gov = lag(fdp_gov, 1), gru_gov = lag(gru_gov, 1))
ger_df_long <- ungroup(ger_df_long)
ger_df_long <- mutate(ger_df_long, gov = ifelse(party == "cdu" & cdsu_gov == 1, 1,
ifelse(party == "spd" & spd_gov == 1, 1,
ifelse(party == "fdp" & fdp_gov == 1, 1,
ifelse(party == "gru" & gru_gov == 1, 1, 0)))))
# gen parliament indicator
ger_df_long$parl <- ifelse(ger_df_long$voteshare_l1 >= 5, 1, 0)
ger_df_long$parl[ger_df_long$party ==  "lin" & ger_df_long$year == 1994] <- 1
ger_df_long$parl[ger_df_long$party ==  "lin" & ger_df_long$year == 1998] <- 1
ger_df_long$parl[ger_df_long$party ==  "lin" & ger_df_long$year == 2002] <- 1
ger_df_long$parl[ger_df_long$party ==  "lin" & ger_df_long$year == 2005] <- 1
# gen unemp swing indicator
ger_df_long$unemp_swing <- ger_df_long$unemp - ger_df_long$unemp_l1
# add ltw swing indicators
ltw_df <- read_dta("./data/election_results_ltw_agg.dta")
ger_df_long <- merge(ger_df_long, ltw_df, by.x = c("year", "party"), by.y = c("election", "party"), all.x = TRUE)
# add polling indicators
load("./data/polls_df_agg.RData")
ger_df_long <- merge(ger_df_long, polls_df_agg, by.x = c("year", "party"), by.y = c("election", "party"), all.x = TRUE)
ger_df_long$polls_70_100[is.na(ger_df_long$polls_70_100)] <- ger_df_long$polls_1_30[is.na(ger_df_long$polls_70_100)] # ad hoc replacement of missing polling data with later polling data
ger_df_long$polls_100_130[is.na(ger_df_long$polls_100_130)] <- ger_df_long$polls_70_100[is.na(ger_df_long$polls_100_130)] # ad hoc replacement of missing polling data with later polling data
ger_df_long$polls_170_200[is.na(ger_df_long$polls_170_200)] <- ger_df_long$polls_100_130[is.na(ger_df_long$polls_170_200)] # ad hoc replacement of missing polling data with later polling data
ger_df_long$polls_200_230[is.na(ger_df_long$polls_200_230)] <- ger_df_long$polls_170_200[is.na(ger_df_long$polls_200_230)] # ad hoc replacement of missing polling data with later polling data
ger_df_long$polls_200_230_swing <- ger_df_long$polls_200_230 - ger_df_long$voteshare_l1
# gen long-term partisanship variable
ger_df_long$voteshare_l1_3 <- rowMeans(select(ger_df_long, voteshare_l1, voteshare_l2, voteshare_l3), na.rm = TRUE)
# drop cases where voteshare variable is 0 (= party effectively does not run)
ger_df_long <- filter(ger_df_long, voteshare != 0 | is.na(voteshare))
# export modified data frame
write_dta(ger_df_long, path = "./data/ger_model_df.dta")
save(ger_df_long, file = "./data/ger_model_df.RData")
ger_df_sub <- select(ger_df_long, voteshare, voteshare_l1, chancellor_party, polls_200_230)
summary(ger_df_long)
stargazer(ger_df_sub, title = "Summary statistics", type = "latex", out = "figures/sumstats.tex")
plot(ger_df_sub)
plot(ger_df_long$voteshare_l1, ger_df_long$voteshare)
table(ger_df_long$party)
table(ger_df_long$party, ger_df_long$gov)
table(ger_df_long$party, ger_df_long$gov)
tab <- table(ger_df_long$party, ger_df_long$gov)
tab <- table(ger_df_long$gov, ger_df_long$party)
tab
rownames(tab)
rownames(tab) <- c("opposition", "government")
tab
recode_partynames()
recode_partynames
names(tab)
names(colnames)
colnames(tab)
colnames(tab) <- recode_partynames(colnames(tab))
tab
View(ger_df_long)
View(ger_df_long)
rownames(tab) <- c("no government", "government")
colnames(tab) <- recode_partynames(colnames(tab))
tab
tab <- tab[,c(2, 7, 3, 4, 5, 1, 6)]
tab
?print.xtable
xtab <- xtable((tab, align = c("l", "r","r","r", "r", "r", "r", "r"), digits = 0, caption = "Government status, by party"))
xtab <- xtable(tab, align = c("l", "r","r","r", "r", "r", "r", "r"), digits = 0, caption = "Government status, by party")
print(xtab, booktabs = TRUE, size = "small", caption.placement = "top", table.placement = "t!",  include.colnames = TRUE, include.rownames = FALSE, floating.environment = "table*", file = paste0("figures/tab-party-gov.tex"))
print(xtab, booktabs = TRUE, size = "small", caption.placement = "top", table.placement = "t!",  include.colnames = TRUE, include.rownames = TRUE, floating.environment = "table*", file = paste0("figures/tab-party-gov.tex"))
# make it nicer
pdf(file="figures/pred_past_voteshare.pdf", height=7, width=7, family="URWTimes")
par(oma=c(0,0.5,0.5,0.5))
par(mar=c(4, 4, 3, 0))
par(pty="s")
# past vote share
plot(ger_df_long$voteshare_l1, ger_df_long$voteshare, xaxt = "n", yaxt = "n", xlab = "", ylab = "", main = "", xlim = c(0, 50), ylim = c(0, 50))
axis(1, seq(0, 100, 10), seq(0, 100, 10))
axis(1, 25, "Lag vote share (%)", line = 1, tick = F)
axis(2, seq(0, 100, 10), seq(0, 100, 10))
axis(2, 25, "Vote share (%)", line = 1, tick = F)
# run model, add regression line
model_out <- lm(voteshare ~ voteshare_l1 - 1, data = ger_df_long)
model_out_aug <- augment(model_out)
model_out_aug$case_label <- paste(ger_df_long$party, ger_df_long$year, sep = " ") %>% recode_partynames(longnames = FALSE) %>% .[model_out_aug$.rownames %>% num()] %>% recode_years
abline(model_out, lty = 2)
# identify important outliers
obs_id <- abs(model_out_aug$.std.resid) > 1.53
points(model_out_aug$voteshare_l1[obs_id], model_out_aug$voteshare[obs_id], pch = 20)
# plot labels of outliers based on resid or cooksd
label_position <- ifelse(model_out_aug$.resid > 0, 3, 1)
text(model_out_aug$voteshare_l1[obs_id], model_out_aug$voteshare[obs_id], label = model_out_aug$case_label[obs_id], cex = .7, pos = label_position[obs_id], offset = .47)
grid()
dev.off()
source("packages.r")
source("functions.r")
ger_df_long <- read_dta("./data/ger_model_df.dta")
election_years <- unique(ger_df_long$year)
election_years_id <- seq_along(election_years)
election_years_df <- data.frame(year = election_years, election_id = election_years_id)
model_out <- lm(swing ~ chancellor_party + voteshare_l1 + polls_200_230, data = ger_df_long)
model_out <- lm(voteshare ~ chancellor_party + voteshare_l1 + polls_200_230, data = ger_df_long)
summary(model_out)
model_out <- lm(swing ~ chancellor_party + voteshare_l1 + polls_200_230, data = ger_df_long)
summary(model_out)
model_out_fit <- augment(model_out)
model_out_fit$party <- ger_df_long$party[as.numeric(model_out_fit$.rownames)]
model_out_fit$year <- ger_df_long$year[as.numeric(model_out_fit$.rownames)]
mean(abs(model_out_fit$.resid))
group_by(model_out_fit, party) %>% summarize(mae = mean(abs(.resid)))
plot(model_out_fit$.fitted, model_out_fit$voteshare, cex = .5, pch = 20)
text(model_out_fit$.fitted, model_out_fit$voteshare, paste0(model_out_fit$party, str_sub(as.character(model_out_fit$year), -2, -1)), pos = 3, offset = .15, cex = .6)
grid()
abline(0, 1)
model_out <- lm(voteshare ~ chancellor_party + voteshare_l1 + polls_200_230, data = ger_df_long)
summary(model_out)
model_out_fit <- augment(model_out)
model_out_fit$party <- ger_df_long$party[as.numeric(model_out_fit$.rownames)]
model_out_fit$year <- ger_df_long$year[as.numeric(model_out_fit$.rownames)]
mean(abs(model_out_fit$.resid))
group_by(model_out_fit, party) %>% summarize(mae = mean(abs(.resid)))
plot(model_out_fit$.fitted, model_out_fit$voteshare, cex = .5, pch = 20)
text(model_out_fit$.fitted, model_out_fit$voteshare, paste0(model_out_fit$party, str_sub(as.character(model_out_fit$year), -2, -1)), pos = 3, offset = .15, cex = .6)
grid()
abline(0, 1)
model_out_fit <- augment(model_out)
model_out_fit$party <- ger_df_long$party[as.numeric(model_out_fit$.rownames)]
model_out_fit$year <- ger_df_long$year[as.numeric(model_out_fit$.rownames)]
mean(abs(model_out_fit$.resid))
group_by(model_out_fit, party) %>% summarize(mae = mean(abs(.resid)))
d <- select(ger_df_long, voteshare, voteshare_l1, voteshare_l1_3, polls_200_230, chancellor_party, major, gov, parl)
dep_var <- 'voteshare'
indep_vars <- setdiff(names(d), dep_var)
?append
seq_along(indep_vars)
combn
?combn
num_vars
lms <- Reduce(append, lapply(seq_along(indep_vars),
function(num_vars) {
Reduce(append, apply(combn(length(indep_vars), num_vars), 2, function(vars) {
formula_string <- paste(c(dep_var, paste(indep_vars[vars], collapse = "+")), collapse = '~')
structure(list(lm(as.formula(formula_string), data = d)), .Names = formula_string)
}))
}
))
length(lms)
lms
lms[1]
?Reduce
sum_tab <- data.frame(model_name = names(lms),
num_vars = sapply(lms, function(x) { x %>% .$coefficients %>% length}) - 1,
r_squared = sapply(lms, function(x) { summary(x) %>% .$r.squared}),
adj_r_squared = sapply(lms, function(x) { summary(x) %>% .$adj.r.squared})
)
sum_tab$ratio <- sum_tab$r_squared / sum_tab$num_vars
lms_best <- lms[sum_tab$r_squared > .35]
View(lms_best)
lms_best
lms_best_predictions <- sapply(lms_best, predict.lm, newdata = filter(ger_df_long, year == i)) %>% t() %>% as.data.frame()
i = 2017
lms_best_predictions <- sapply(lms_best, predict.lm, newdata = filter(ger_df_long, year == i)) %>% t() %>% as.data.frame()
lms_best_predictions
head(lms_best_predictions)
lms_best_predictions <- apply(lms_best_predictions, 1, add, filter(ger_df_long, year == i)$voteshare_l1) %>% t() %>% as.data.frame
lms_best_predictions
lms_best_predictions <- sapply(lms_best, predict.lm, newdata = filter(ger_df_long, year == i)) %>% t() %>% as.data.frame()
names(lms_best_predictions) <- filter(ger_df_long, year == i)$party
summary(lms_best_predictions)
lms_best_predictions$vote_sums <- rowSums(lms_best_predictions)
lms_best_predictions$vote_sums
View(lms_best)
View(sum_tab)
### run multiple models -----------------
d <- select(ger_df_long, voteshare, voteshare_l1, voteshare_l1_3, polls_200_230, chancellor_party, major, gov, parl)
dep_var <- 'swing'
indep_vars <- setdiff(names(d), dep_var)
lms <- Reduce(append, lapply(seq_along(indep_vars),
function(num_vars) {
Reduce(append, apply(combn(length(indep_vars), num_vars), 2, function(vars) {
formula_string <- paste(c(dep_var, paste(indep_vars[vars], collapse = "+")), collapse = '~')
structure(list(lm(as.formula(formula_string), data = d)), .Names = formula_string)
}))
}
))
lms[1]
length(lms)
d <- select(ger_df_long, voteshare, voteshare_l1, voteshare_l1_3, polls_200_230, chancellor_party, major, gov, parl)
dep_var <- 'swing'
indep_vars <- setdiff(names(d), dep_var)
lms <- Reduce(append, lapply(seq_along(indep_vars),
function(num_vars) {
Reduce(append, apply(combn(length(indep_vars), num_vars), 2, function(vars) {
formula_string <- paste(c(dep_var, paste(indep_vars[vars], collapse = "+")), collapse = '~')
structure(list(lm(as.formula(formula_string), data = d)), .Names = formula_string)
}))
}
))
d <- select(ger_df_long, swing, voteshare, voteshare_l1, voteshare_l1_3, polls_200_230, chancellor_party, major, gov, parl)
dep_var <- 'swing'
indep_vars <- setdiff(names(d), dep_var)
lms <- Reduce(append, lapply(seq_along(indep_vars),
function(num_vars) {
Reduce(append, apply(combn(length(indep_vars), num_vars), 2, function(vars) {
formula_string <- paste(c(dep_var, paste(indep_vars[vars], collapse = "+")), collapse = '~')
structure(list(lm(as.formula(formula_string), data = d)), .Names = formula_string)
}))
}
))
lms[1]
length(lms)
lms[1] %>% summary
lms[[1]] %>% summary
d <- select(ger_df_long, swing, voteshare_l1, voteshare_l1_3, polls_200_230, chancellor_party, major, gov, parl)
dep_var <- 'swing'
indep_vars <- setdiff(names(d), dep_var)
lms <- Reduce(append, lapply(seq_along(indep_vars),
function(num_vars) {
Reduce(append, apply(combn(length(indep_vars), num_vars), 2, function(vars) {
formula_string <- paste(c(dep_var, paste(indep_vars[vars], collapse = "+")), collapse = '~')
structure(list(lm(as.formula(formula_string), data = d)), .Names = formula_string)
}))
}
))
lms[[1]] %>% summary
d <- select(ger_df_long, swing, swing_l1, voteshare_l1, voteshare_l1_3, polls_200_230, chancellor_party, major, gov, parl)
dep_var <- 'swing'
indep_vars <- setdiff(names(d), dep_var)
lms <- Reduce(append, lapply(seq_along(indep_vars),
function(num_vars) {
Reduce(append, apply(combn(length(indep_vars), num_vars), 2, function(vars) {
formula_string <- paste(c(dep_var, paste(indep_vars[vars], collapse = "+")), collapse = '~')
structure(list(lm(as.formula(formula_string), data = d)), .Names = formula_string)
}))
}
))
lms[[1]] %>% summary
length(lms)
sum_tab <- data.frame(model_name = names(lms),
num_vars = sapply(lms, function(x) { x %>% .$coefficients %>% length}) - 1,
r_squared = sapply(lms, function(x) { summary(x) %>% .$r.squared}),
adj_r_squared = sapply(lms, function(x) { summary(x) %>% .$adj.r.squared})
)
sum_tab$ratio <- sum_tab$r_squared / sum_tab$num_vars
View(sum_tab)
i = 2017
lms_best <- lms[sum_tab$r_squared > .35]
lms_best_predictions <- sapply(lms_best, predict.lm, newdata = filter(ger_df_long, year == i)) %>% t() %>% as.data.frame()
names(lms_best_predictions) <- filter(ger_df_long, year == i)$party
summary(lms_best_predictions)
lms_best_predictions$vote_sums <- rowSums(lms_best_predictions)
lms_best_predictions$vote_sums
lms_best_predictions
hist(lms_best_predictions$vote_sums)
lms_best_predictions <- sapply(lms_best, predict.lm, newdata = filter(ger_df_long, year == i)) %>% t() %>% as.data.frame()
lms_best_predictions <- apply(lms_best_predictions, 1, add, filter(ger_df_long, year == i)$voteshare_l1) %>% t() %>% as.data.frame
names(lms_best_predictions) <- filter(ger_df_long, year == i)$party
summary(lms_best_predictions)
lms_best_predictions$vote_sums <- rowSums(lms_best_predictions)
hist(lms_best_predictions$vote_sums)
summary(lms_best_predictions$vote_sums)
hist(lms_best_predictions$vote_sums)
# prepare formula
vars <- c("voteshare_l1", "major", "chancellor_party", "gov", "parl", "ltw_swing_mean_100_full", "polls_200_230")
fmla <- as.formula(paste("swing ~ ", paste(vars, collapse= "+")))
# run out-of-sample predictions
model_out <- list()
model_pred <- list()
for(i in seq_along(election_year)) {
insample <- filter(ger_df_long, year != election_year[i])
outsample <- filter(ger_df_long, year == election_year[i])
model_out[[i]] <- lm(fmla, data = insample)
model_pred[[i]] <- augment(model_out[[i]], newdata = outsample, type.predict = "response")
}
# run out-of-sample predictions
model_out <- list()
model_pred <- list()
for(i in seq_along(election_year)) {
insample <- filter(ger_df_long, year != election_year[i])
outsample <- filter(ger_df_long, year == election_year[i])
model_out[[i]] <- lm(fmla, data = insample)
model_pred[[i]] <- augment(model_out[[i]], newdata = outsample, type.predict = "response")
}
names(ger_df_long)
election_years
# run out-of-sample predictions
model_out <- list()
model_pred <- list()
for(i in seq_along(election_years)) {
insample <- filter(ger_df_long, year != election_years[i])
outsample <- filter(ger_df_long, year == election_years[i])
model_out[[i]] <- lm(fmla, data = insample)
model_pred[[i]] <- augment(model_out[[i]], newdata = outsample, type.predict = "response")
}
names(ger_df_long)
# prepare formula
vars <- c("voteshare_l1", "major", "chancellor_party", "gov", "parl", "ltw_swing_mean_200_full", "polls_200_230")
fmla <- as.formula(paste("swing ~ ", paste(vars, collapse= "+")))
# run out-of-sample predictions
model_out <- list()
model_pred <- list()
for(i in seq_along(election_years)) {
insample <- filter(ger_df_long, year != election_years[i])
outsample <- filter(ger_df_long, year == election_years[i])
model_out[[i]] <- lm(fmla, data = insample)
model_pred[[i]] <- augment(model_out[[i]], newdata = outsample, type.predict = "response")
}
model_pred_df <- do.call(rbind, model_pred)
model_pred
model_pred_df
View(model_pred_df)
mean(abs(model_pred_df$swing - model_pred_df$.fitted), na.rm = TRUE)
group_by(model_pred_df, party) %>% summarize(mae = mean(abs(swing - .fitted), na.rm = TRUE))
plot(model_pred_df$.fitted, model_pred_df$swing, cex = .5, pch = 20)
text(model_pred_df$.fitted, model_pred_df$swing, paste0(model_pred_df$party, str_sub(as.character(model_pred_df$year), -2, -1)), pos = 3, offset = .15, cex = .6)
grid()
abline(0, 1)
voteshares_pred_list <- list()
elections <- c(2005, 2009, 2013, 2017)
for (i in 1:4) {
model_out <- lm(voteshare ~ chancellor_party + voteshare_l1 + polls_200_230, data = filter(ger_df_long, year < elections[i]))
summary(model_out)
# predicted vote shares
voteshares_pred_df <- data.frame(party = filter(ger_df_long, year == elections[i])$party,
voteshare_true = filter(ger_df_long, year == elections[i])$voteshare,
voteshare_pred = predict(model_out, filter(ger_df_long, year == elections[i])),
se_fit = predict(model_out, filter(ger_df_long, year == elections[i]),  se.fit = TRUE, interval = "prediction")$se.fit,
lwr_conf = predict(model_out, filter(ger_df_long, year == elections[i]), se.fit = TRUE, interval = "confidence")$fit[,"lwr"],
upr_conf = predict(model_out, filter(ger_df_long, year == elections[i]), se.fit = TRUE, interval = "confidence")$fit[,"upr"],
lwr_pred = predict(model_out, filter(ger_df_long, year == elections[i]), se.fit = TRUE, interval = "prediction")$fit[,"lwr"],
upr_pred = predict(model_out, filter(ger_df_long, year == elections[i]), se.fit = TRUE, interval = "prediction")$fit[,"upr"]
)
voteshares_pred_df$se_pred <- sqrt(voteshares_pred_df$se_fit^2+var(model_out$residuals)) # see http://stats.stackexchange.com/questions/154247/what-are-the-formulae-used-in-r-by-predict-lm-when-interval-a-none-b-pred
cat("\n", "Election ", elections[i], "\n")
print(voteshares_pred_df)
voteshares_pred_list[[i]] <- voteshares_pred_df
}
x <- seq(40,60, length=500)
x
kand.1 <- function(x) dnorm(x, mean=36, sd=1)
kand.2 <- function(x) dnorm(x, mean=33, sd=1)
curve(kand.1, from = 30, to = 40, n=500, type="l",lwd=2)
curve(kand.2, from = 30, to = 40, n=500, type="l",lwd=2, col="red", add=T)
text(37, .4, "Kand. 1")
text(34, .4, "Kand. 2", col="red")
diff.mean <- 36 - 33
diff.se <- sqrt(1^2 + 1^2)
pnorm(0, mean=diff.mean, sd=diff.se, lower.tail = TRUE)
?pnorm
pnorm(0, mean=diff.mean, sd=diff.se, lower.tail = TRUE)
pnorm(0, mean=diff.mean, sd=diff.se, lower.tail = F)
pnorm(0, mean=diff.mean, sd=diff.se, lower.tail = T)
curve(kand.1, from = 30, to = 40, n=500, type="l",lwd=2)
curve(kand.2, from = 30, to = 40, n=500, type="l",lwd=2, col="red", add=T)
text(37, .4, "Kand. 1")
text(34, .4, "Kand. 2", col="red")
summary(model_out)
voteshares_pred_list
i
simulate(model_out, 1)
?simulate
sim_df <- simulate(model_out, 100)
View(sim_df)
View(ger_df_long)
model_out <- lm(voteshare ~ chancellor_party + voteshare_l1 + polls_200_230, data = ger_df_long))
model_out <- lm(voteshare ~ chancellor_party + voteshare_l1 + polls_200_230, data = ger_df_long)
View(ger_df_long)
sim_df <- simulate(model_out, 1000)
dim(sim_df)
ger_df_long$voteshare
View(ger_df_long)
voteshare_pred = predict(model_out, filter(ger_df_long, year == 2017))
voteshare_pred
model_out <- lm(voteshare ~ chancellor_party + voteshare_l1 + polls_200_230, data = ger_df_long)
voteshare_pred = predict(model_out, filter(ger_df_long, year == 2017))
ger_df_long %>% filter(year == 2017) %>% select(chancellor_party, voteshare_l1, polls_200_230)
df <- data.frame(x=x<-1:10, y=1.5*x + rnorm(length(x)))
df
voteshare_pred
ger_df_long$pred <- voteshare_pred
ger_df_long_pred <- ger_df_long %>% filter(year == 2017) %>% select(chancellor_party, voteshare_l1, polls_200_230)
ger_df_long_pred$pred <- voteshare_pred
ger_df_long_pred
fit <- lm(pred ~ chancellor_party + voteshare_l1 + polls_200_230, data = ger_df_long_pred)
summary(fit)
model_out <- lm(voteshare ~ chancellor_party + voteshare_l1 + polls_200_230, data = ger_df_long)
simulateX(model_out,  nsim = 4, X = ger_df_long_pred)
simulateX <- function(object, nsim=1, seed=NULL, X, ...) {
object$fitted.values <- X
simulate(object=object, nsim=nsim, seed=seed, ...)
}
simulateX(model_out,  nsim = 4, X = ger_df_long_pred)
model_out$fitted.values
library(Zelig)
install.packages("Zelig")
library(zelig)
library(Zelig)
z5 <- zls$new()
z5$zelig(voteshare ~ chancellor_party + voteshare_l1 + polls_200_230, data = ger_df_long)
z5$setx()
z5$sim()
z5
str(z5)
z5$get_predict
z5$get_predict()
model_out <- lm(voteshare ~ chancellor_party + voteshare_l1 + polls_200_230, data = ger_df_long)
voteshare_pred = predict(model_out, filter(ger_df_long, year == 2017))
voteshare_pred
voteshare_pred = predict(model_out, filter(ger_df_long, year == 2017), type = "response")
voteshare_pred
sim.y <- replicate(10, rnorm(rep(1, length(voteshare_pred)), voteshare_pred))
sim.y
sim.y <- replicate(1000, rnorm(rep(1, length(voteshare_pred)), voteshare_pred))
voteshare_pred_sim <- replicate(1000, rnorm(rep(1, length(voteshare_pred)), voteshare_pred))
hist(voteshare_pred_sim[1,])
voteshare_pred_sim <- replicate(1000, rnorm(rep(1, length(voteshare_pred)), voteshare_pred)) %>% t()
voteshare_pred_sim
voteshare_pred_sim <- replicate(1000, rnorm(rep(1, length(voteshare_pred)), voteshare_pred)) %>% t() %>% as.data.frame
names(voteshare_pred_sim)
filter(ger_df_long, year == 2017)
filter(ger_df_long, year == 2017)$party
filter(ger_df_long, year == 2017)$party %>% as.character
names(voteshare_pred_sim) <- filter(ger_df_long, year == 2017)$party %>% as.character
plot(density(voteshare_pred_sim$cdu))
lines(density(voteshare_pred_sim$spd), col = "red")
density(voteshare_pred_sim$spd)
plot(density(voteshare_pred_sim$cdu), xlim = c(23, 42))
lines(density(voteshare_pred_sim$spd), col = "red")
?rnorm
rep(1, length(voteshare_pred))
voteshare_pred
rep(1, length(voteshare_pred))
voteshare_pred
voteshare_pred
?predict
voteshare_pred_se = predict(model_out, filter(ger_df_long, year == 2017), se.fit = TRUE)
voteshare_pred_se
voteshare_pred_se = predict(model_out, filter(ger_df_long, year == 2017), se.fit = TRUE, interval = "prediction")
voteshare_pred_se
voteshare_pred_se = predict(model_out, filter(ger_df_long, year == 2017), se.fit = TRUE, interval = "prediction")
voteshare_pred_se <- predict(model_out, filter(ger_df_long, year == 2017), se.fit = TRUE, interval = "prediction")
voteshare_pred_se
predict(model_out, filter(ger_df_long, year == 2017), se.fit = TRUE, interval = "prediction")
predict(model_out, filter(ger_df_long, year == 2017), se.fit = TRUE, interval = "confidence")
voteshare_pred <- predict(model_out, filter(ger_df_long, year == 2017), se.fit = TRUE, interval = "prediction")
voteshare_pred$fit
voteshare_pred$fit$fit
voteshare_pred$fit[,"fit"]
sqrt(voteshare_pred$se_fit^2+var(model_out$residuals))
voteshare_pred$se_fit
voteshare_pred <- predict(model_out, filter(ger_df_long, year == 2017), se.fit = TRUE, interval = "prediction")
voteshare_pred
voteshare_pred$se_fit^2
sqrt(voteshare_pred$se.fit^2+var(model_out$residuals))
voteshare_pred_sim <- replicate(1000, rnorm(rep(1, length(voteshare_pred)), mean = voteshare_pred$fit[,"fit"], sd = sqrt(voteshare_pred$se.fit^2+var(model_out$residuals)))) %>% t() %>% as.data.frame
voteshare_pred_sim
names(voteshare_pred_sim) <- filter(ger_df_long, year == 2017)$party %>% as.character
dim(voteshare_pred_sim)
length(voteshare_pred)
voteshare_pred_sim <- replicate(1000, rnorm(rep(1, length(voteshare_pred$fit[,"fit"])), mean = voteshare_pred$fit[,"fit"], sd = sqrt(voteshare_pred$se.fit^2+var(model_out$residuals)))) %>% t() %>% as.data.frame
names(voteshare_pred_sim) <- filter(ger_df_long, year == 2017)$party %>% as.character
plot(density(voteshare_pred_sim$cdu), xlim = c(23, 42))
lines(density(voteshare_pred_sim$spd), col = "red")
plot(density(voteshare_pred_sim$cdu), xlim = c(20, 50))
lines(density(voteshare_pred_sim$spd), col = "red")
voteshare_pred_sim$cdu > voteshare_pred_sim$spd
table(voteshare_pred_sim$cdu > voteshare_pred_sim$spd)
prop.table(voteshare_pred_sim$cdu > voteshare_pred_sim$spd)
prop.table(table(voteshare_pred_sim$cdu > voteshare_pred_sim$spd))
names(voteshare_pred_sim)
prop.table(table(voteshare_pred_sim$fdp < 0.05))
voteshare_pred$fit[,"fit"]
names(voteshare_pred_sim)
prop.table(table(voteshare_pred_sim$fdp < 5))
prop.table(table(voteshare_pred_sim$gru < 5))
