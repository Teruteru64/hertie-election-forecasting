source("packages.r")
source("functions.r")
### import data ------------------------
ger_df_long <- read_dta("./data/ger_model_df.dta")
election_years <- unique(ger_df_long$year)
election_years_id <- seq_along(election_years)
election_years_df <- data.frame(year = election_years, election_id = election_years_id)
rm(list = ls())
source("packages.r")
source("functions.r")
### import data ------------------------
ger_df_long <- read_dta("./data/ger_model_df.dta")
# prepare election ids
election_years <- unique(ger_df_long$year)
election_years_id <- seq_along(election_years)
election_years_df <- data.frame(year = election_years, election_id = election_years_id)
model_out <- lm(swing ~ chancellor_party + voteshare_l1 + polls_200_230, data = ger_df_long)
model_out <- lm(voteshare ~ chancellor_party + voteshare_l1 + polls_200_230, data = ger_df_long)
summary(model_out)
model_out_fit <- augment(model_out)
model_out_fit
model_out_fit$party <- ger_df_long$party[as.numeric(model_out_fit$.rownames)]
model_out_fit$year <- ger_df_long$year[as.numeric(model_out_fit$.rownames)]
mean(abs(model_out_fit$.resid))
group_by(model_out_fit, party) %>% summarize(mae = mean(abs(.resid)))
sqrt(mean((model_out_fit$.resid^2))) # RMSE
group_by(model_out_fit, party) %>% summarize(mae = mean(abs(.resid)))
plot(model_out_fit$.fitted, model_out_fit$voteshare, cex = .5, pch = 20)
text(model_out_fit$.fitted, model_out_fit$voteshare, paste0(model_out_fit$party, str_sub(as.character(model_out_fit$year), -2, -1)), pos = 3, offset = .15, cex = .6)
grid()
abline(0, 1)
model_out <- lm(swing ~ chancellor_party + voteshare_l1 + polls_200_230, data = ger_df_long)
model_out_fit <- augment(model_out)
model_out_fit$party <- ger_df_long$party[as.numeric(model_out_fit$.rownames)]
model_out_fit$year <- ger_df_long$year[as.numeric(model_out_fit$.rownames)]
mean(abs(model_out_fit$.resid))# MAE
sqrt(mean((model_out_fit$.resid^2))) # RMSE
group_by(model_out_fit, party) %>% summarize(mae = mean(abs(.resid)))
plot(model_out_fit$.fitted, model_out_fit$voteshare, cex = .5, pch = 20)
text(model_out_fit$.fitted, model_out_fit$voteshare, paste0(model_out_fit$party, str_sub(as.character(model_out_fit$year), -2, -1)), pos = 3, offset = .15, cex = .6)
grid()
abline(0, 1)
summary(model_out)
plot(model_out_fit$.fitted, model_out_fit$swing, cex = .5, pch = 20)
text(model_out_fit$.fitted, model_out_fit$swing, paste0(model_out_fit$party, str_sub(as.character(model_out_fit$year), -2, -1)), pos = 3, offset = .15, cex = .6)
grid()
abline(0, 1)
d <- select(ger_df_long, voteshare, voteshare_l1, voteshare_l1_3, polls_200_230, chancellor_party, major, gov, parl)
dep_var <- 'voteshare'
indep_vars <- setdiff(names(d), dep_var)
lms <- Reduce(append, lapply(seq_along(indep_vars),
function(num_vars) {
Reduce(append, apply(combn(length(indep_vars), num_vars), 2, function(vars) {
formula_string <- paste(c(dep_var, paste(indep_vars[vars], collapse = "+")), collapse = '~')
structure(list(lm(as.formula(formula_string), data = d)), .Names = formula_string)
}))
}
))
length(lms)
lms <- Reduce(append, lapply(seq_along(indep_vars),
function(num_vars) {
Reduce(append, apply(combn(length(indep_vars), num_vars), 2, function(vars) {
formula_string <- paste(c(dep_var, paste(indep_vars[vars], collapse = "+")), collapse = '~')
structure(list(lm(as.formula(formula_string), data = d)), .Names = formula_string)
}))
}
))
length(lms)
sum_tab <- data.frame(model_name = names(lms),
num_vars = sapply(lms, function(x) { x %>% .$coefficients %>% length}) - 1,
#df = sapply(lms, function(x) { summary(x) %>% .$df[2,]}),
r_squared = sapply(lms, function(x) { summary(x) %>% .$r.squared}),
adj_r_squared = sapply(lms, function(x) { summary(x) %>% .$adj.r.squared})
)
sum_tab$ratio <- sum_tab$r_squared / sum_tab$num_vars
View(sum_tab$ratio)
View(sum_tab)
i = 2017
lms_best <- lms[sum_tab$r_squared > .35]
lms_best_predictions <- sapply(lms_best, predict.lm, newdata = filter(ger_df_long, year == i)) %>% t() %>% as.data.frame()
lms_best_predictions <- apply(lms_best_predictions, 1, add, filter(ger_df_long, year == i)$voteshare_l1) %>% t() %>% as.data.frame
names(lms_best_predictions) <- filter(ger_df_long, year == i)$party
summary(lms_best_predictions)
lms_best_predictions$vote_sums <- rowSums(lms_best_predictions)
View(lms_best_predictions)
# prepare formula
vars <- c("voteshare_l1", "major", "chancellor_party", "gov", "parl", "ltw_swing_mean_100_full", "polls_200_230")
fmla <- as.formula(paste("swing ~ ", paste(vars, collapse= "+")))
# run out-of-sample predictions
model_out <- list()
model_pred <- list()
for(i in seq_along(election_year)) {
insample <- filter(ger_df_long, year != election_year[i])
outsample <- filter(ger_df_long, year == election_year[i])
model_out[[i]] <- lm(fmla, data = insample)
model_pred[[i]] <- augment(model_out[[i]], newdata = outsample, type.predict = "response")
}
# evaluate fit
model_pred_df <- do.call(rbind, model_pred)
mean(abs(model_pred_df$swing - model_pred_df$.fitted), na.rm = TRUE)
group_by(model_pred_df, party) %>% summarize(mae = mean(abs(swing - .fitted), na.rm = TRUE))
plot(model_pred_df$.fitted, model_pred_df$swing, cex = .5, pch = 20)
text(model_pred_df$.fitted, model_pred_df$swing, paste0(model_pred_df$party, str_sub(as.character(model_pred_df$year), -2, -1)), pos = 3, offset = .15, cex = .6)
grid()
abline(0, 1)
swing~ltw_swing_mean_200_full+major+voteshare_l1Xelection+polls_200_230yXelection
swing~ltw_swing_mean_200_full+chancellor_party+voteshare_l1Xelection+polls_200_230yXelection
swing~swing_l1+voteshare_l1Xelection+polls_200_230yXelection
swing~swing_l1+voteshare_l1Xelection+polls_200_230yXelection
swing~ltw_swing_mean_200_full+voteshare_l1Xelection+polls_200_230yXelection
# prepare formula
vars <- c("voteshare_l1", "major", "chancellor_party", "gov", "parl", "ltw_swing_mean_100_full", "polls_200_230")
fmla <- as.formula(paste("swing ~ ", paste(vars, collapse= "+")))
# run out-of-sample predictions
model_out <- list()
model_pred <- list()
for(i in seq_along(election_year)) {
insample <- filter(ger_df_long, year != election_year[i])
outsample <- filter(ger_df_long, year == election_year[i])
model_out[[i]] <- lm(fmla, data = insample)
model_pred[[i]] <- augment(model_out[[i]], newdata = outsample, type.predict = "response")
}
# evaluate fit
model_pred_df <- do.call(rbind, model_pred)
mean(abs(model_pred_df$swing - model_pred_df$.fitted), na.rm = TRUE)
group_by(model_pred_df, party) %>% summarize(mae = mean(abs(swing - .fitted), na.rm = TRUE))
plot(model_pred_df$.fitted, model_pred_df$swing, cex = .5, pch = 20)
text(model_pred_df$.fitted, model_pred_df$swing, paste0(model_pred_df$party, str_sub(as.character(model_pred_df$year), -2, -1)), pos = 3, offset = .15, cex = .6)
grid()
abline(0, 1)
GDP <- read.csv('~/hertie-election-forecasting (Akira)/DP_LIVE_26042017111042979.csv')
rm(list = ls())
library(knitr)
opts_chunk$set(message = FALSE, error = TRUE, fig.pos = 'H', tidy.opts=list(width.cutoff=65), tidy=TRUE, fig.path='figs/', cache.path='cache/graphics-',
fig.align='center', fig.width = 5, fig.height = 4, fig.show = 'hold',
cache = TRUE, par = TRUE)
library(foreign) #read foreign file objects
install.packages("dplyr", repos = "https://cran.rstudio.com/")
library(dplyr) #manipulate data
install.packages("ggplot2", repos = "https://cran.rstudio.com/")
library(ggplot2) #plot results
install.packages("psych", repos = "https://cran.rstudio.com/")
library(psych) #create summary statistics
library(plyr) #tools for splitting, qpplying and combining data
library(data.table)
install.packages("dplyr", repos = "https://cran.rstudio.com/")
require(haven)
install.packages("ggplot2", repos = "https://cran.rstudio.com/")
install.packages("psych", repos = "https://cran.rstudio.com/")
library(lubridate)
install.packages("repmis")
library(repmis)
install.packages("VIF", repos = "https://cran.rstudio.com/")
library(VIF)
install.packages("psych", repos = "https://cran.rstudio.com/")
install.packages("repmis")
install.packages("VIF", repos = "https://cran.rstudio.com/")
install.packages("VIF", repos = "https://cran.rstudio.com/")
install.packages("VIF", repos = "https://cran.rstudio.com/")
install.packages("VIF", repos = "https://cran.rstudio.com/")
install.packages("VIF", repos = "https://cran.rstudio.com/")
DAX <- fread('https://chart.finance.yahoo.com/table.csv?s=%5EGDAXI&a=10&b=26&c=1990&d=3&e=27&f=2017&g=d&ignore=.csv')
CDAX <- read.csv("~/hertie-election-forecasting (Akira)/data/^cdax_d.csv")
GfK <- read.csv('~/hertie-election-forecasting (Akira)/GfK.csv')
GFE_Kayser <- read_dta('~/hertie-election-forecasting (Akira)/BundestagForecastReplicationData.dta')
GFE <- read_dta('~/hertie-election-forecasting (Akira)/data/ger_nat.dta')
election_dates <- load('~/hertie-election-forecasting/data/election_dates.RData') #not working
GDP <- read.csv('~/hertie-election-forecasting (Akira)/DP_LIVE_26042017111042979.csv')
View(GFE)
View(GFE)
GFE$Date <- election_date
GFE$Date <- ymd(as.character(GFE$Date))
GFE_Kayser$Date <- as.Date(GFE_Kayser$date, "%d.%m.%Y")
eco.in <- merge(CDAX, GfK, by = "Date")
stock_GDP <- merge(CDAX, GDP, by = "Date")
DAX_GfK <- merge(CDAX, GfK, by = "Date")
GFE.con <- merge(CDAX, GFE_Kayser, by = "Date")
GDP <- read.csv('~/hertie-election-forecasting (Akira)/CLVMNACSCAB1GQDE.csv')
View(GDP)
GDP$Date <- ymd(as.character(GDP$DATE))
stock_GDP <- merge(CDAX, GDP, by = "Date")
stock_GDP <- stock_GDP%>%
mutate(stock_gr=log(Close/lag(Close,1)))
par(mar = c(5,5,2,5))
with(stock_GDP, plot(as.Date(Date), stock_gr, type="l", col="red3",
xlab="Year", ylab= "CDAX quarterly growth (%)"),
ylim=c(0,1200))
par(new = T)
with(stock_GDP, plot(as.Date(Date), Value, type="l", axes=F, col="blue3", xlab="Year", ylab=NA, cex=1.2))
axis(side = 4)
mtext(side = 4, line = 3, 'GDP quarterly growth (%)')
legend("topleft",
legend=c("DAX quarterly growth (%)", "GDP quarterly growth (%)"),
lty=1:1, cex=0.50, col=c("red3", "blue3"))
View(stock_GDP)
GDP <- read.csv('~/hertie-election-forecasting (Akira)/CLVMNACSCAB1GQDE.csv')
GDP <- read.csv('~/hertie-election-forecasting (Akira)/CLVMNACSCAB1GQDE.csv')
GDP$Date <- ymd(as.character(GDP$DATE))
GFE$Date <- election_date
GFE$Date <- ymd(as.character(GFE$Date))
GFE_Kayser$Date <- as.Date(GFE_Kayser$date, "%d.%m.%Y")
eco.in <- merge(CDAX, GfK, by = "Date")
View(CDAX)
?merge
stock_GDP <- merge(CDAX, GDP, by = "Date", all.y = TRUE)
stock_GDP <- merge(CDAX, GDP, by = "Date", all.y = TRUE)
GDP <- read.csv('~/hertie-election-forecasting (Akira)/CLVMNACSCAB1GQDE.csv')
GDP$Date <- ymd(as.character(GDP$DATE))
View(stock_GDP)
CDAX$Date <- ymd(as.character(CDAX$Date))
stock_GDP <- merge(CDAX, GDP, by = "Date", all.y = TRUE)
stock_GDP <- merge(CDAX, GDP, by = "Date")
View(stock_GDP)
stock_GDP <- merge(CDAX, GDP, by = "Date")
stock_GDP <- merge(CDAX, GDP, by = "Date")
?cbind
View(GDP)
CDAX <- read.csv("~/hertie-election-forecasting (Akira)/data/^cdax_d.csv")
stock_GDP <- merge(CDAX, GDP, by = "Date")
View(stock_GDP)
stock_GDP <- merge(CDAX, GDP, by = "Date")
CDAX$Date <- ymd(as.character(CDAX$Date))
stock_GDP <- merge(CDAX, GDP, by = "Date")
library(data.table)
?lapply
stock_GDP$stock_gr <- as.data.table(stock_GDP)[, lapply(.SD, function(x)x/shift(x) - 1), .SDcols = 4]
stock_GDP <- stock_GDP%>%
mutate(stock_gr=log(Close/lag(Close,1)))
par(mar = c(5,5,2,5))
with(stock_GDP, plot(as.Date(Date), stock_gr, type="l", col="red3",
xlab="Year", ylab= "CDAX quarterly growth (%)"),
ylim=c(0,1200))
par(new = T)
with(stock_GDP, plot(as.Date(Date), Value, type="l", axes=F, col="blue3", xlab="Year", ylab=NA, cex=1.2))
axis(side = 4)
mtext(side = 4, line = 3, 'GDP quarterly growth (%)')
legend("topleft",
legend=c("DAX quarterly growth (%)", "GDP quarterly growth (%)"),
lty=1:1, cex=0.50, col=c("red3", "blue3"))
with(stock_GDP, plot(as.Date(Date), Value, type="l", axes=F, col="blue3", xlab="Year", ylab=NA, cex=1.2))
with(stock_GDP, plot(as.Date(Date), GDP_growth, type="l", axes=F, col="blue3", xlab="Year", ylab=NA, cex=1.2))
stock_GDP <- stock_GDP%>%
mutate(stock_gr=log(Close/lag(Close,1)))
par(mar = c(5,5,2,5))
with(stock_GDP, plot(as.Date(Date), stock_gr, type="l", col="red3",
xlab="Year", ylab= "CDAX quarterly growth (%)"),
ylim=c(0,1200))
par(new = T)
with(stock_GDP, plot(as.Date(Date), GDP_growth, type="l", axes=F, col="blue3", xlab="Year", ylab=NA, cex=1.2))
axis(side = 4)
mtext(side = 4, line = 3, 'GDP quarterly growth (%)')
legend("topleft",
legend=c("DAX quarterly growth (%)", "GDP quarterly growth (%)"),
lty=1:1, cex=0.50, col=c("red3", "blue3"))
ccfvalues3 <- ccf(stock_GDPK$stock_gr, stock_GDPK$GDP_growth)
ccfvalues3 <- ccf(stock_GDP$stock_gr, stock_GDP$GDP_growth)
?ccf
ccfvalues3 <- ccf(stock_GDP$stock_gr, stock_GDP$GDP_growth, na.action = na.pass)
stock_GDP <- stock_GDP%>%
mutate(stock_gr=log(Close/lag(Close,1)))
par(mar = c(5,5,2,5))
with(stock_GDP, plot(as.Date(Date), stock_gr, type="l", col="red3",
xlab="Year", ylab= "CDAX quarterly growth (%)"),
ylim=c(0,1200))
par(new = T)
with(stock_GDP, plot(as.Date(Date), GDP_growth, type="l", axes=F, col="blue3", xlab="Year", ylab=NA, cex=1.2))
axis(side = 4)
mtext(side = 4, line = 3, 'GDP quarterly growth (%)')
legend("topleft",
legend=c("DAX quarterly growth (%)", "GDP quarterly growth (%)"),
lty=1:1, cex=0.50, col=c("red3", "blue3"))
View(CDAX)
rm(list = ls())
library(knitr)
opts_chunk$set(message = FALSE, error = TRUE, fig.pos = 'H', tidy.opts=list(width.cutoff=65), tidy=TRUE, fig.path='figs/', cache.path='cache/graphics-',
fig.align='center', fig.width = 5, fig.height = 4, fig.show = 'hold',
cache = TRUE, par = TRUE)
library(foreign) #read foreign file objects
install.packages("dplyr", repos = "https://cran.rstudio.com/")
library(dplyr) #manipulate data
install.packages("ggplot2", repos = "https://cran.rstudio.com/")
install.packages("dplyr", repos = "https://cran.rstudio.com/")
library(ggplot2) #plot results
install.packages("ggplot2", repos = "https://cran.rstudio.com/")
install.packages("psych", repos = "https://cran.rstudio.com/")
library(psych) #create summary statistics
library(plyr) #tools for splitting, qpplying and combining data
library(data.table)
require(haven)
library(lubridate)
install.packages("repmis")
library(repmis)
install.packages("VIF", repos = "https://cran.rstudio.com/")
library(VIF)
library(data.table)
DAX <- fread('https://chart.finance.yahoo.com/table.csv?s=%5EGDAXI&a=10&b=26&c=1990&d=3&e=27&f=2017&g=d&ignore=.csv')
CDAX <- read.csv("~/hertie-election-forecasting (Akira)/^CDAXX.csv")
install.packages("psych", repos = "https://cran.rstudio.com/")
View(CDAX)
install.packages("VIF", repos = "https://cran.rstudio.com/")
install.packages("repmis")
install.packages("repmis")
View(DAX)
GfK <- read.csv('~/hertie-election-forecasting (Akira)/GfK.csv')
GFE_Kayser <- read_dta('~/hertie-election-forecasting (Akira)/BundestagForecastReplicationData.dta')
GFE <- read_dta('~/hertie-election-forecasting (Akira)/data/ger_nat.dta')
StockHist <- read.csv("~/hertie-election-forecasting (Akira)/Tab__01_Aktienindex__Dividendenrendite__Performance-Index__Index_der_Lebenshaltungskosten__Realer_Pe.csv")
GDP <- read.csv('~/hertie-election-forecasting (Akira)/CLVMNACSCAB1GQDE.csv')
GDP$Date <- ymd(as.character(GDP$DATE))
GFE$Date <- election_date
GFE$Date <- ymd(as.character(GFE$Date))
election_dates <- load('~/hertie-election-forecasting/data/election_dates.RData')
GFE$Date <- election_date
GFE_Kayser$Date <- as.Date(GFE_Kayser$date, "%d.%m.%Y")
eco.in <- merge(CDAX, GfK, by = "Date")
stock_GDP <- merge(CDAX, GDP, by = "Date")
stock_GDP$stock_gr <- as.data.table(stock_GDP)[, lapply(.SD, function(x)x/shift(x) - 1), .SDcols = 4]
DAX_GfK <- merge(CDAX, GfK, by = "Date")
GFE.con <- merge(CDAX, GFE_Kayser, by = "Date")
par(mar = c(5,5,2,5))
with(eco.in, plot(as.Date(Date), Close, type="l", col="red3",
xlab="Year", ylab=expression(CDAX)),
ylim=c(0,1200))
par(new = T)
with(eco.in, plot(as.Date(Date), Actual, type="l", axes=F, col="blue3", xlab="Year", ylab=NA, cex=1.2))
axis(side = 4)
mtext(side = 4, line = 3, 'GfK Consumer Confidence')
legend("topleft",
legend=c(expression(CDAX), "GfK Consumer Confidence"),
lty=1:1, cex=0.75, col=c("red3", "blue3"))
CDAX <- read.csv("~/hertie-election-forecasting (Akira)/^CDAXX.csv")
View(CDAX)
CDAX <- read.csv("~/hertie-election-forecasting (Akira)/^CDAXX.csv")
View(CDAX)
CDAX$Date <- as.Date(CDAX$Date, "%Y/%m/%d")
CDAX$Date <- ymd(as.character(CDAX$Date))
View(CDAX)
CDAX <- read.csv("~/hertie-election-forecasting (Akira)/^CDAXX.csv")
eco.in <- merge(CDAX, GfK, by = "Date")
par(mar = c(5,5,2,5))
with(eco.in, plot(as.Date(Date), Close, type="l", col="red3",
xlab="Year", ylab=expression(CDAX)),
ylim=c(0,1200))
par(new = T)
with(eco.in, plot(as.Date(Date), Actual, type="l", axes=F, col="blue3", xlab="Year", ylab=NA, cex=1.2))
axis(side = 4)
mtext(side = 4, line = 3, 'GfK Consumer Confidence')
legend("topleft",
legend=c(expression(CDAX), "GfK Consumer Confidence"),
lty=1:1, cex=0.75, col=c("red3", "blue3"))
View(CDAX)
View(eco.in)
par(mar = c(5,5,2,5))
with(eco.in, plot(as.Date(Date), Close, type="l", col="red3",
xlab="Year", ylab=expression(CDAX)),
ylim=c(0,1200))
with(eco.in, plot(as.Date(Date), Close, type="l", col="red3",
xlab="Year", ylab=expression(CDAX)),
ylim=c(0,1200), rm.na = TRUE)
?with
?plot
par(mar = c(5,5,2,5))
with(eco.in, plot(as.Date(Date), Close, type="l", col="red3",
xlab="Year", ylab=expression(CDAX)),
ylim=c(0,1200), rm.na = TRUE)
par(new = T)
with(eco.in, plot(as.Date(Date), Actual, type="l", axes=F, col="blue3", xlab="Year", ylab=NA, cex=1.2))
axis(side = 4)
mtext(side = 4, line = 3, 'GfK Consumer Confidence')
legend("topleft",
legend=c(expression(CDAX), "GfK Consumer Confidence"),
lty=1:1, cex=0.75, col=c("red3", "blue3"))
par(mar = c(5,5,2,5))
with(eco.in, plot(as.Date(Date), Close, type="l", col="red3",
xlab="Year", ylab=expression(CDAX)),
ylim=c(0,1200))
library(foreign) #read foreign file objects
install.packages("dplyr", repos = "https://cran.rstudio.com/")
library(dplyr) #manipulate data
install.packages("ggplot2", repos = "https://cran.rstudio.com/")
library(ggplot2) #plot results
install.packages("psych", repos = "https://cran.rstudio.com/")
library(psych) #create summary statistics
library(plyr) #tools for splitting, qpplying and combining data
install.packages("dplyr", repos = "https://cran.rstudio.com/")
library(data.table)
install.packages("psych", repos = "https://cran.rstudio.com/")
install.packages("ggplot2", repos = "https://cran.rstudio.com/")
require(haven)
library(lubridate)
install.packages("repmis")
library(repmis)
install.packages("VIF", repos = "https://cran.rstudio.com/")
library(VIF)
library(data.table)
DAX <- fread('https://chart.finance.yahoo.com/table.csv?s=%5EGDAXI&a=10&b=26&c=1990&d=3&e=27&f=2017&g=d&ignore=.csv')
CDAX <- read.csv("~/hertie-election-forecasting (Akira)/^CDAXX.csv")
StockHist <- read.csv("~/hertie-election-forecasting (Akira)/Tab__01_Aktienindex__Dividendenrendite__Performance-Index__Index_der_Lebenshaltungskosten__Realer_Pe.csv")
GfK <- read.csv('~/hertie-election-forecasting (Akira)/GfK.csv')
GFE_Kayser <- read_dta('~/hertie-election-forecasting (Akira)/BundestagForecastReplicationData.dta')
GFE <- read_dta('~/hertie-election-forecasting (Akira)/data/ger_nat.dta')
election_dates <- load('~/hertie-election-forecasting/data/election_dates.RData')
GDP <- read.csv('~/hertie-election-forecasting (Akira)/CLVMNACSCAB1GQDE.csv')
install.packages("ggplot2", repos = "https://cran.rstudio.com/")
install.packages("repmis")
install.packages("VIF", repos = "https://cran.rstudio.com/")
GDP$Date <- ymd(as.character(GDP$DATE))
GFE$Date <- election_date
GFE$Date <- ymd(as.character(GFE$Date))
GFE_Kayser$Date <- as.Date(GFE_Kayser$date, "%d.%m.%Y")
eco.in <- merge(CDAX, GfK, by = "Date")
stock_GDP <- merge(CDAX, GDP, by = "Date")
stock_GDP$stock_gr <- as.data.table(stock_GDP)[, lapply(.SD, function(x)x/shift(x) - 1), .SDcols = 4]
DAX_GfK <- merge(CDAX, GfK, by = "Date")
GFE.con <- merge(CDAX, GFE_Kayser, by = "Date")
install.packages("VIF", repos = "https://cran.rstudio.com/")
par(mar = c(5,5,2,5))
with(eco.in, plot(as.Date(Date), Close, type="l", col="red3",
xlab="Year", ylab=expression(CDAX)),
ylim=c(0,1200))
?par
par(mar = c(5,5,2,5))
with(eco.in, plot(as.Date(Date), Close, type="l", col="red3",
xlab="Year", ylab=expression(CDAX)),
ylim=c(0,1000))
par(mar = c(0,5,2,5))
with(eco.in, plot(as.Date(Date), Close, type="l", col="red3",
xlab="Year", ylab=expression(CDAX)),
ylim=c(0,1200))
par(mar = c(5,5,2,5))
with(eco.in, plot(as.Date(Date), Close, type="l", col="red3",
xlab="Year", ylab=expression(CDAX)),
ylim=c(0,1200))
?mar
with(stock_GDP, plot(as.Date(Date), stock_gr, type="l", col="red3",
xlab="Year", ylab= "CDAX quarterly growth (%)"),
ylim=c(0,1200))
par(mar = c(5,5,2,5))
with(eco.in, plot(as.Date(Date), Open, type="l", col="red3",
xlab="Year", ylab=expression(CDAX)),
ylim=c(0,1200))
par(mar = c(5,5,2,5))
with(eco.in, plot(as.Date(Date), Close, type="l", col="red3",
xlab="Year", ylab=expression(CDAX),
ylim=c(0,1200))
par(mar = c(5,5,2,5))
with(eco.in, plot(as.Date(Date), Close, type="l", col="red3",
xlab="Year", ylab=expression(CDAX)),
ylim=c(0,1200))
par(mar = c(5,5,2,5))
with(eco.in, plot(as.Date(Date), Close, type="l", col="red3",
xlab="Year", ylab=expression(CDAX)),
ylim=c(0,1200))
par(mar = c(5,5,2,5))
with(CDAX, plot(as.Date(Date), Close, type="l", col="red3",
xlab="Year", ylab=expression(CDAX)),
ylim=c(0,1200))
par(mar = c(5,5,2,5))
with(eco,in, plot(as.Date(Date), Close, type="l", col="red3",
xlab="Year", ylab=expression(CDAX)),
ylim=c(0,1200))
par(mar = c(5,5,2,5))
with(eco.in, plot(as.Date(Date), Close, type="l", col="red3",
xlab="Year", ylab=expression(CDAX)),
ylim=c(0,1200))
eco.in <- merge(DAX, GfK, by = "Date")
par(mar = c(5,5,2,5))
with(eco.in, plot(as.Date(Date), Close, type="l", col="red3",
xlab="Year", ylab=expression(CDAX)),
ylim=c(0,1200))
par(mar = c(5,5,2,5))
with(eco.in, plot(as.Date(Date), Close, type="l", col="red3",
xlab="Year", ylab=expression(DAX)),
ylim=c(0,1200))
par(new = T)
with(eco.in, plot(as.Date(Date), Actual, type="l", axes=F, col="blue3", xlab="Year", ylab=NA, cex=1.2))
axis(side = 4)
mtext(side = 4, line = 3, 'GfK Consumer Confidence')
legend("topleft",
legend=c(expression(CDAX), "GfK Consumer Confidence"),
lty=1:1, cex=0.75, col=c("red3", "blue3"))
ccfvalues <- ccf(eco.in$Close, eco.in$Actual)
ccfvalues
View(stock_GDP)
stock_GDP <- merge(CDAX, GDP, by = "Date")
View(GDP)
DAX_GfK <- merge(DAX, GfK, by = "Date")
par(mar = c(5,5,2,5))
with(DAX_GfK, plot(as.Date(Date), Close, type="l", col="red3",
xlab="Year", ylab=expression(DAX)),
ylim=c(0,1200))
par(new = T)
with(DAX_GfK , plot(as.Date(Date), Actual, type="l", axes=F, col="blue3", xlab="Year", ylab=NA, cex=1.2))
axis(side = 4)
mtext(side = 4, line = 3, 'GfK Consumer Confidence')
legend("topleft",
legend=c(expression(CDAX), "GfK Consumer Confidence"),
lty=1:1, cex=0.75, col=c("red3", "blue3"))
ccfvalues <- ccf(DAX_GfK$Close, DAX_GfK$Actual)
ccfvalues
perception <- lm(Actual ~ close, DAX_GfK)
perception <- lm(Actual ~ Close, DAX_GfK)
summary(perception)
GDP <- read.csv('~/hertie-election-forecasting (Akira)/CLVMNACSCAB1GQDE.csv')
CDAX <- read.csv("~/hertie-election-forecasting (Akira)/^CDAXX.csv")
GDP$Date <- ymd(as.character(GDP$DATE))
stock_GDP <- merge(CDAX, GDP, by = "Date")
?merge
stock_GDP <- merge(CDAX, GDP, by = "Date", all.y = all)
stock_GDP <- merge(CDAX, GDP, by = "Date", all.y = TRUE)
View(stock_GDP)
stock_GDP <- merge(CDAX, GDP, by = "Date", all.x = TRUE)
