<<<<<<< HEAD
p1 <- p1 + theme(panel.background = element_blank())
p1
p1 <- p1 + scale_x_continuous(breaks= c(2007, seq(2008,2017,2)))
p1
p1 <- ggplot(eco.in, aes(x = as.Date(Date), y = Close.y)) + geom_line(colour = "#68382C", size = 1.5)
p1 <- p1 + theme(panel.grid.minor = element_blank(),
panel.grid.major = element_line(color = "gray50", size = 0.5),
panel.grid.major.x = element_blank())
p1 <- p1 + theme(panel.background = element_blank())
p1 <- p1 + scale_x_continuous(breaks= c(2007, seq(2008,2017,2)))
p1
p1 <- ggplot(eco.in, aes(x = as.Date(Date), y = Close.y)) + geom_line(colour = "#68382C", size = 1.5)
p1 <- p1 + theme(panel.grid.minor = element_blank(),
panel.grid.major = element_line(color = "gray50", size = 0.5),
panel.grid.major.x = element_blank())
p1 <- p1 + theme(panel.grid.minor = element_blank(),
panel.grid.major = element_line(color = "gray50", size = 0.5),
panel.grid.major.x = element_blank())
p1 <- p1 + theme(panel.background = element_blank())
p1
p1 <- p1 + scale_x_continuous(breaks= c(2007, seq(2008,2017,2)))
p1
p1 <- p1 + scale_x_continuous(breaks= c(2007-03-28, seq(2008,2017,2)))
p1
p1 <- ggplot(eco.in, aes(x = as.Date(Date), y = Close.y)) + geom_line(colour = "#68382C", size = 1.5)
p1 <- p1 + theme(panel.grid.minor = element_blank(),
panel.grid.major = element_line(color = "gray50", size = 0.5),
panel.grid.major.x = element_blank())
p1 <- p1 + theme(panel.background = element_blank())
p1
p1 <- p1 + ggtitle("CDAX\n") + labs(x=NULL, y= NULL)
theme(plot.title = element_text(hjust = -0.16, vjust=2.12, colour="#68382C", size = 14))
p1
install.packages("extrafont")
install.packages("extrafont")
p1 <- ggplot(eco.in, aes(x = as.Date(Date), y = Close.y)) + geom_line(colour = "#68382C", size = 1.5) + theme(panel.grid.minor = element_blank(),
panel.grid.major = element_line(color = "gray50", size = 0.5),
panel.grid.major.x = element_blank()) + theme(panel.background = element_blank()) + ggtitle("CDAX\n") + labs(x=NULL, y= NULL)
theme(plot.title = element_text(hjust = -0.16, vjust=2.12, colour="#68382C", size = 14))
p1
p2 <- ggplot(eco.in, aes(x = as.Date(Date), y = Actual)) + geom_line(colour = "#00A4E6", size = 1.5) + theme(panel.grid.minor = element_blank(),
panel.grid.major = element_line(color = "gray50", size = 0.5),
panel.grid.major.x = element_blank()) + theme(panel.background = element_blank()) + ggtitle("GfK Consumer Confidence\n") + labs(x=NULL, y= NULL)
theme(plot.title = element_text(hjust = -0.16, vjust=2.12, colour="#68382C", size = 14))
p2
p2 <- ggplot(eco.in, aes(x = as.Date(Date), y = Actual)) + geom_line(colour = "#00A4E6", size = 1.5) + theme(panel.grid.minor = element_blank(),
panel.grid.major = element_line(color = "gray50", size = 0.5),
panel.grid.major.x = element_blank()) + theme(panel.background = element_blank()) + ggtitle("GfK Consumer Confidence\n") + labs(x=NULL, y= NULL)
theme(plot.title = element_text(hjust = -0.16, vjust=2.12, colour="#68382C", size = 14)) + scale_y_continuous(expand = c(0, 0), limits = c(-0.9,10.9))
p2 <- ggplot(eco.in, aes(x = as.Date(Date), y = Actual)) + geom_line(colour = "#00A4E6", size = 1.5) + theme(panel.grid.minor = element_blank(),
panel.grid.major = element_line(color = "gray50", size = 0.5),
panel.grid.major.x = element_blank()) + theme(panel.background = element_blank()) + ggtitle("GfK Consumer Confidence\n") + labs(x=NULL, y= NULL) + scale_y_continuous(expand = c(0, 0), limits = c(-0.9,10.9))
theme(plot.title = element_text(hjust = -0.16, vjust=2.12, colour="#68382C", size = 14))
p2
p2 <- ggplot(eco.in, aes(x = as.Date(Date), y = Actual)) + geom_line(colour = "#00A4E6", size = 1.5) + theme(panel.grid.minor = element_blank(),
panel.grid.major = element_line(color = "gray50", size = 0.5),
panel.grid.major.x = element_blank()) + theme(panel.background = element_blank()) + ggtitle("GfK Consumer Confidence\n") + labs(x=NULL, y= NULL) + scale_y_continuous(expand = c(0, 0), limits = c(-0.0,10.9))
theme(plot.title = element_text(hjust = -0.16, vjust=2.12, colour="#68382C", size = 14))
p2
# Get the plot grobs
g1 <- ggplotGrob(p1)
g2 <- ggplotGrob(p2)
# Get the locations of the plot panels in g1.
pp <- c(subset(g1$layout, name == "panel", se = t:r))
# Overlap panel for second plot on that of the first plot
g1 <- gtable_add_grob(g1, g2$grobs[[which(g2$layout$name == "panel")]], pp$t, pp$l, pp$b, pp$l)
# ggplot contains many labels that are themselves complex grob;
# usually a text grob surrounded by margins.
# When moving the grobs from, say, the left to the right of a plot,
# make sure the margins and the justifications are swapped around.
# The function below does the swapping.
# Taken from the cowplot package:
# https://github.com/wilkelab/cowplot/blob/master/R/switch_axis.R
hinvert_title_grob <- function(grob){
# Swap the widths
widths <- grob$widths
grob$widths[1] <- widths[3]
grob$widths[3] <- widths[1]
grob$vp[[1]]$layout$widths[1] <- widths[3]
grob$vp[[1]]$layout$widths[3] <- widths[1]
# Fix the justification
grob$children[[1]]$hjust <- 1 - grob$children[[1]]$hjust
grob$children[[1]]$vjust <- 1 - grob$children[[1]]$vjust
grob$children[[1]]$x <- unit(1, "npc") - grob$children[[1]]$x
grob
}
# Get the y axis from g2 (axis line, tick marks, and tick mark labels)
index <- which(g2$layout$name == "axis-l")  # Which grob
yaxis <- g2$grobs[[index]]                  # Extract the grob
# yaxis is a complex of grobs containing the axis line, the tick marks, and the tick mark labels.
# The relevant grobs are contained in axis$children:
#   axis$children[[1]] contains the axis line;
#   axis$children[[2]] contains the tick marks and tick mark labels.
# Second, swap tick marks and tick mark labels
ticks <- yaxis$children[[2]]
ticks$widths <- rev(ticks$widths)
ticks$grobs <- rev(ticks$grobs)
# Third, move the tick marks
# Tick mark lengths can change.
# A function to get the original tick mark length
# Taken from the cowplot package:
# https://github.com/wilkelab/cowplot/blob/master/R/switch_axis.R
plot_theme <- function(p) {
plyr::defaults(p$theme, theme_get())
}
tml <- plot_theme(p1)$axis.ticks.length   # Tick mark length
ticks$grobs[[1]]$x <- ticks$grobs[[1]]$x - unit(1, "npc") + tml
# Fourth, swap margins and fix justifications for the tick mark labels
ticks$grobs[[2]] <- hinvert_title_grob(ticks$grobs[[2]])
# Fifth, put ticks back into yaxis
yaxis$children[[2]] <- ticks
# Put the transformed yaxis on the right side of g1
g1 <- gtable_add_cols(g1, g2$widths[g2$layout[index, ]$l], pp$r)
g1 <- gtable_add_grob(g1, yaxis, pp$t, pp$r + 1, pp$b, pp$r + 1, clip = "off", name = "axis-r")
# Labels grob
left = textGrob("CDAX", x = 0, y = 0.9, just = c("left", "top"), gp = gpar(fontsize = 14, col =  "#68382C"))
right =  textGrob("GfK", x = 1, y = 0.9, just = c("right", "top"), gp = gpar(fontsize = 14, col =  "#00a4e6"))
labs = gTree("Labs", children = gList(left, right))
# New row in the gtable for labels
height = unit(3, "grobheight", left)
g1 <- gtable_add_rows(g1, height, 2)
# Put the label in the new row
g1 = gtable_add_grob(g1, labs, t=3, l=3, r=5)
# Turn off clipping in the plot panel
g1$layout[which(g1$layout$name == "panel"), ]$clip = "off"
ggsave("plot.pdf", g1, width=5, height=5)
g1
g1 <- ggplotGrob(p1)
g2 <- ggplotGrob(p2)
pp <- c(subset(g1$layout, name == "panel", se = t:r))
g1 <- gtable_add_grob(g1, g2$grobs[[which(g2$layout$name == "panel")]], pp$t, pp$l, pp$b, pp$l)
hinvert_title_grob <- function(grob){
# Swap the widths
widths <- grob$widths
grob$widths[1] <- widths[3]
grob$widths[3] <- widths[1]
grob$vp[[1]]$layout$widths[1] <- widths[3]
grob$vp[[1]]$layout$widths[3] <- widths[1]
# Fix the justification
grob$children[[1]]$hjust <- 1 - grob$children[[1]]$hjust
grob$children[[1]]$vjust <- 1 - grob$children[[1]]$vjust
grob$children[[1]]$x <- unit(1, "npc") - grob$children[[1]]$x
grob
}
index <- which(g2$layout$name == "axis-l")  # Which grob
yaxis <- g2$grobs[[index]]                  # Extract the grob
plot_theme <- function(p) {
plyr::defaults(p$theme, theme_get())
}
tml <- plot_theme(p1)$axis.ticks.length   # Tick mark length
ticks$grobs[[1]]$x <- ticks$grobs[[1]]$x - unit(1, "npc") + tml
ticks$grobs[[2]] <- hinvert_title_grob(ticks$grobs[[2]])
yaxis$children[[2]] <- ticks
g1 <- gtable_add_cols(g1, g2$widths[g2$layout[index, ]$l], pp$r)
g1 <- gtable_add_grob(g1, yaxis, pp$t, pp$r + 1, pp$b, pp$r + 1, clip = "off", name = "axis-r")
left = textGrob("CDAX", x = 0, y = 0.9, just = c("left", "top"), gp = gpar(fontsize = 14, col =  "#68382C"))
right =  textGrob("GfK", x = 1, y = 0.9, just = c("right", "top"), gp = gpar(fontsize = 14, col =  "#00a4e6"))
labs = gTree("Labs", children = gList(left, right))
height = unit(3, "grobheight", left)
g1 <- gtable_add_rows(g1, height, 2)
g1 = gtable_add_grob(g1, labs, t=3, l=3, r=5)
g <- g1$layout[which(g1$layout$name == "panel"), ]$clip = "off"
g1$layout[which(g1$layout$name == "panel"), ]$clip = "off"
g1
conflicts(detail=TRUE)
df <- merge(DAX, CDAX, by = "Date")
eco.in <- merge(df, GfK, by = "Date")
eco.in <- merge(CDAX, GfK, by = "Date")
plot1 <- eco.in %>%
select(Date, Close.y) %>%
na.omit() %>%
ggplot() +
geom_point(aes(x = as.Date(Date), y = Close.y), size = 0.5, alpha = 0.75) +
ylab("Red dots / m") +
theme_minimal() +
theme(axis.title.x = element_blank())
plot1 <- eco.in %>%
select(Date, Close) %>%
na.omit() %>%
ggplot() +
geom_point(aes(x = as.Date(Date), y = Close), size = 0.5, alpha = 0.75) +
ylab("Red dots / m") +
theme_minimal() +
theme(axis.title.x = element_blank())
plot1
plot1 <- eco.in %>%
select(Date, Close) %>%
na.omit() %>%
ggplot() +
geom_line(aes(x = as.Date(Date), y = Close), size = 0.5, alpha = 0.75) +
ylab("Red dots / m") +
theme_minimal() +
theme(axis.title.x = element_blank())
plot1
plot2 <- df %>%
select(Date, Actual) %>%
na.omit() %>%
ggplot() +
geom_point(aes(x = Date, y = Actual), size = 0.5, alpha = 0.75) +
ylab("GfK Consumer Confidence") +
theme_minimal() +
theme(axis.title.x = element_blank())
plot2 <- eco.in %>%
select(Date, Actual) %>%
na.omit() %>%
ggplot() +
geom_point(aes(x = Date, y = Actual), size = 0.5, alpha = 0.75) +
ylab("GfK Consumer Confidence") +
theme_minimal() +
theme(axis.title.x = element_blank())
grid.newpage()
grid.draw(rbind(ggplotGrob(plot1), ggplotGrob(plot2), size = "last"))
g.bottom <- ggplot(eco.in, aes(x = Date, y = Close)) +
geom_line() +  #plot CDAX
geom_line(aes(y = GfK), colour = "blue", size =1.5) +  # plot GfK
## specify our yaxis limits and remove any axis expansion
scale_y_continuous(expand = c(0,0), limits = c(0,1000)) +
labs(x = "Date", y = "CDAX") +
theme_classic() +
theme(plot.background = element_rect(fill = "transparent"),
plot.margin = unit(c(2,0,1,1),units="lines"))
g.bottom
g.bottom <- ggplot(eco.in, aes(x = Date, y = Close)) +
geom_line() +  #plot CDAX
geom_line(aes(y = GfK), colour = "blue", size =1.5) +  # plot GfK
## specify our yaxis limits and remove any axis expansion
scale_y_continuous(expand = c(0,0), limits = c(1,1000)) +
labs(x = "Date", y = "CDAX") +
theme_classic() +
theme(plot.background = element_rect(fill = "transparent"),
plot.margin = unit(c(2,0,1,1),units="lines"))
g.bottom
library(gtable)
grid.newpage()
p1 <- ggplot(eco.in, aes(Date, Close)) + geom_line(colour = "blue") + theme_bw()
p2 <- ggplot(eco.ins, aes(Date, Actual)) + geom_line(colour = "red") + theme_bw() %+replace%
theme(panel.background = element_rect(fill = NA))
# extract gtable
g1 <- ggplot_gtable(ggplot_build(p1))
g2 <- ggplot_gtable(ggplot_build(p2))
p1 <- ggplot(eco.in, aes(Date, Close)) + geom_line(colour = "blue") + theme_bw()
p2 <- ggplot(eco.in, aes(Date, Actual)) + geom_line(colour = "red") + theme_bw() %+replace%
theme(panel.background = element_rect(fill = NA))
g1 <- ggplot_gtable(ggplot_build(p1))
g2 <- ggplot_gtable(ggplot_build(p2))
pp <- c(subset(g1$layout, name == "panel", se = t:r))
g <- gtable_add_grob(g1, g2$grobs[[which(g2$layout$name == "panel")]], pp$t,
pp$l, pp$b, pp$l)
ia <- which(g2$layout$name == "axis-l")
ga <- g2$grobs[[ia]]
ax <- ga$children[[2]]
ax$widths <- rev(ax$widths)
ax$grobs <- rev(ax$grobs)
ax$grobs[[1]]$x <- ax$grobs[[1]]$x - unit(1, "npc") + unit(0.15, "cm")
g <- gtable_add_cols(g, g2$widths[g2$layout[ia, ]$l], length(g$widths) - 1)
g <- gtable_add_grob(g, ax, pp$t, length(g$widths) - 1, pp$b)
grid.draw(g)
grid.draw(g)
ia <- which(g2$layout$name == "axis-l")
ga <- g2$grobs[[ia]]
ax <- ga$children[[2]]
ax$widths <- rev(ax$widths)
ax$grobs <- rev(ax$grobs)
ax$grobs[[1]]$x <- ax$grobs[[1]]$x - unit(100) + unit(1)
g <- gtable_add_cols(g, g2$widths[g2$layout[ia, ]$l], length(g$widths) - 1)
g <- gtable_add_grob(g, ax, pp$t, length(g$widths) - 1, pp$b)
?unit
ia <- which(g2$layout$name == "axis-l")
ga <- g2$grobs[[ia]]
ax <- ga$children[[2]]
ax$widths <- rev(ax$widths)
ax$grobs <- rev(ax$grobs)
ax$grobs[[1]]$x <- ax$grobs[[1]]$x - unit(100, "npc") + unit(1, "npc")
g <- gtable_add_cols(g, g2$widths[g2$layout[ia, ]$l], length(g$widths) - 1)
g <- gtable_add_grob(g, ax, pp$t, length(g$widths) - 1, pp$b)
grid.draw(g)
g1 <- ggplot_gtable(ggplot_build(p1))
g2 <- ggplot_gtable(ggplot_build(p2))
# overlap the panel of 2nd plot on that of 1st plot
pp <- c(subset(g1$layout, name == "panel", se = t:r))
g <- gtable_add_grob(g1, g2$grobs[[which(g2$layout$name == "panel")]], pp$t,
pp$l, pp$b, pp$l)
# axis tweaks
ia <- which(g2$layout$name == "axis-l")
ga <- g2$grobs[[ia]]
ax <- ga$children[[2]]
ax$widths <- rev(ax$widths)
ax$grobs <- rev(ax$grobs)
ax$grobs[[1]]$x <- ax$grobs[[1]]$x - unit(100, "npc") + unit(1, "npc")
g <- gtable_add_cols(g, g2$widths[g2$layout[ia, ]$l], length(g$widths) - 1)
g <- gtable_add_grob(g, ax, pp$t, length(g$widths) - 1, pp$b)
# draw it
grid.draw(g)
?par
?mar
par(mar = c(5,5,2,5))
with(eco.in, plot(Date, Close, type="l", col="red3",
ylab=expression(CDAX)),
ylim=c(0,1200))
?plot
with(eco.in, plot(Date, Close, type="l", col="red3",
ylab=expression(CDAX)),
ylim=c(0,1200))
with(eco.in, plot(as.Date(Date), Close, type="l", col="red3",
ylab=expression(CDAX)),
ylim=c(0,1200))
?plot
?pch
par(mar = c(5,5,2,5))
with(eco.in, plot(as.Date(Date), Close, type="l", col="red3",
ylab=expression(CDAX)),
ylim=c(0,1200))
par(new = T)
with(eco.in, plot(as.Date(Date), Actual, ?pch=16, axes=F, xlab=NA, ylab=NA, cex=1.2))
axis(side = 4)
mtext(side = 4, line = 3, 'GfK Consumer Confidence')
legend("topleft",
legend=c(expression(CDAX), "GfK Consumer Confidence"),
lty=c(1,0), pch=c(NA, 16), col=c("red3", "black"))
par(mar = c(5,5,2,5))
with(eco.in, plot(as.Date(Date), Close, type="l", col="red3",
ylab=expression(CDAX)),
ylim=c(0,1200))
par(new = T)
with(eco.in, plot(as.Date(Date), Actual, pch=16, axes=F, xlab=NA, ylab=NA, cex=1.2))
axis(side = 4)
mtext(side = 4, line = 3, 'GfK Consumer Confidence')
legend("topleft",
legend=c(expression(CDAX), "GfK Consumer Confidence"),
lty=c(1,0), pch=c(NA, 16), col=c("red3", "black"))
par(mar = c(5,5,2,5))
with(eco.in, plot(as.Date(Date), Close, type="l", col="red3",
ylab=expression(CDAX)),
ylim=c(0,1200))
par(new = T)
with(eco.in, plot(as.Date(Date), Actual, type="l", col="blue3", xlab=NA, ylab=NA, cex=1.2))
axis(side = 4)
mtext(side = 4, line = 3, 'GfK Consumer Confidence')
legend("topleft",
legend=c(expression(CDAX), "GfK Consumer Confidence"),
lty=c(1,0),col=c("red3", "blue3"))
par(mar = c(5,5,2,5))
with(eco.in, plot(as.Date(Date), Close, type="l", col="red3",
ylab=expression(CDAX)),
ylim=c(0,1200))
par(new = T)
with(eco.in, plot(as.Date(Date), Actual, type="l", col="blue3", xlab=NA, ylab=NA, cex=1.2))
axis(side = 4)
mtext(side = 4, line = 3, 'GfK Consumer Confidence')
par(new = T)
with(eco.in, plot(as.Date(Date), Actual, type="l", col="blue3", xlab=NA, ylab=NA, cex=1.2))
axis(side = 4)
mtext(side = 4, line = 3, 'GfK Consumer Confidence')
legend("topleft",
legend=c(expression(CDAX), "GfK Consumer Confidence"),
lty=c(1,0), pch=c(NA, 16), col=c("red3", "blue3"))
legend("topleft",
legend=c(expression(CDAX), "GfK Consumer Confidence"),
lty=c(1,0), col=c("red3", "blue3"))
par(mar = c(5,5,2,5))
with(eco.in, plot(as.Date(Date), Close, type="l", col="red3",
ylab=expression(CDAX)),
ylim=c(0,1200))
par(new = T)
with(eco.in, plot(as.Date(Date), Actual, type="l", col="blue3", xlab=NA, ylab=NA, cex=1.2))
axis(side = 4)
mtext(side = 4, line = 3, 'GfK Consumer Confidence')
legend("topleft",
legend=c(expression(CDAX), "GfK Consumer Confidence"),
lty=c(1,0), pch=c(NA, 16), col=c("red3", "blue3"))
legend("topleft",
legend=c(expression(CDAX), "GfK Consumer Confidence"),
lty=c(1,0), lty=c(1,0), col=c("red3", "blue3"))
par(mar = c(5,5,2,5))
with(eco.in, plot(as.Date(Date), Close, type="l", col="red3",
ylab=expression(CDAX)),
ylim=c(0,1200))
par(new = T)
with(eco.in, plot(as.Date(Date), Actual, type="l", col="blue3", xlab=NA, ylab=NA, cex=1.2))
axis(side = 4)
mtext(side = 4, line = 3, 'GfK Consumer Confidence')
legend("topleft",
legend=c(expression(CDAX), "GfK Consumer Confidence"),
lty=c(1,0), lty=c(1,0), col=c("red3", "blue3"))
par(mar = c(5,5,2,5))
with(eco.in, plot(as.Date(Date), Close, type="l", col="red3",
ylab=expression(CDAX)),
ylim=c(0,1200))
par(new = T)
with(eco.in, plot(as.Date(Date), Actual, type="l", col="blue3", xlab=NA, ylab=NA, cex=1.2))
axis(side = 4)
mtext(side = 4, line = 3, 'GfK Consumer Confidence')
legend("topleft",
legend=c(expression(CDAX), "GfK Consumer Confidence"),
lty=c(1,0), col=c("red3", "blue3"))
par(mar = c(5,5,2,5))
with(eco.in, plot(as.Date(Date), Close, type="l", col="red3",
ylab=expression(CDAX)),
ylim=c(0,1200))
par(new = T)
with(eco.in, plot(as.Date(Date), Actual, type="l", col="blue3", xlab="Year", ylab=NA, cex=1.2))
axis(side = 4)
mtext(side = 4, line = 2, 'GfK Consumer Confidence')
legend("topleft",
legend=c(expression(CDAX), "GfK Consumer Confidence"),
lty=c(1,0), col=c("red3", "blue3"))
par(mar = c(5,5,2,5))
with(eco.in, plot(as.Date(Date), Close, type="l", col="red3",
xlab="Year", ylab=expression(CDAX)),
ylim=c(0,1200))
par(new = T)
with(eco.in, plot(as.Date(Date), Actual, type="l", col="blue3", xlab="Year", ylab=NA, cex=1.2))
axis(side = 4)
mtext(side = 4, line = 2, 'GfK Consumer Confidence')
legend("topleft",
legend=c(expression(CDAX), "GfK Consumer Confidence"),
lty=c(1,0), col=c("red3", "blue3"))
with(eco.in, plot(as.Date(Date), Actual, type="l", col="blue3", xlab="Year", ylab=NA, cex=1.2))
axis(side = 4)
with(eco.in, plot(as.Date(Date), Actual, type="l", col="blue3", xlab="Year", ylab=NA, cex=1.2))
with(eco.in, plot(as.Date(Date), Actual, type="l", axes=F,, col="blue3", xlab="Year", ylab=NA, cex=1.2))
par(mar = c(5,5,2,5))
with(eco.in, plot(as.Date(Date), Close, type="l", col="red3",
xlab="Year", ylab=expression(CDAX)),
ylim=c(0,1200))
par(new = T)
with(eco.in, plot(as.Date(Date), Actual, type="l", axes=F,, col="blue3", xlab="Year", ylab=NA, cex=1.2))
axis(side = 4)
mtext(side = 4, line = 3, 'GfK Consumer Confidence')
legend("topleft",
legend=c(expression(CDAX), "GfK Consumer Confidence"),
lty=c(1,0), col=c("red3", "blue3"))
?legend
par(mar = c(5,5,2,5))
with(eco.in, plot(as.Date(Date), Close, type="l", col="red3",
xlab="Year", ylab=expression(CDAX)),
ylim=c(0,1200))
par(new = T)
with(eco.in, plot(as.Date(Date), Actual, type="l", axes=F,, col="blue3", xlab="Year", ylab=NA, cex=1.2))
axis(side = 4)
mtext(side = 4, line = 3, 'GfK Consumer Confidence')
?legend("topleft",
legend=c(expression(CDAX), "GfK Consumer Confidence"),
lty=c(1,0), col=c("red3", "blue3"), cex=0.5)
par(mar = c(5,5,2,5))
with(eco.in, plot(as.Date(Date), Close, type="l", col="red3",
xlab="Year", ylab=expression(CDAX)),
ylim=c(0,1200))
par(new = T)
with(eco.in, plot(as.Date(Date), Actual, type="l", axes=F, col="blue3", xlab="Year", ylab=NA, cex=1.2))
axis(side = 4)
mtext(side = 4, line = 3, 'GfK Consumer Confidence')
?legend("topleft",
legend=c(expression(CDAX), "GfK Consumer Confidence"),
lty=1:1, col=c("red3", "blue3"))
```{r plot, include=TRUE, echo=TRUE}
par(mar = c(5,5,2,5))
with(eco.in, plot(as.Date(Date), Close, type="l", col="red3",
xlab="Year", ylab=expression(CDAX)),
ylim=c(0,1200))
par(new = T)
with(eco.in, plot(as.Date(Date), Actual, type="l", axes=F, col="blue3", xlab="Year", ylab=NA, cex=1.2))
axis(side = 4)
mtext(side = 4, line = 3, 'GfK Consumer Confidence')
legend("topleft",
legend=c(expression(CDAX), "GfK Consumer Confidence"),
lty=1:1, cex=0.39, col=c("red3", "blue3"))
GDP <- read.csv('~/hertie-election-forecasting (Akira)/DP_LIVE_26042017111042979.csv')
GDP <- read.csv('~/hertie-election-forecasting (Akira)/DP_LIVE_26042017111042979.csv')
GfK <- read.csv('~/hertie-election-forecasting (Akira)/history.csv')
rm(list = ls())
git checkout style
git merge master
View(by_tailnum)
View(CDAX)
View(DAX)
load("~/hertie-election-forecasting (Akira)/.RData")
library(knitr)
opts_chunk$set(message = FALSE, error = TRUE, fig.pos = 'H', tidy.opts=list(width.cutoff=65), tidy=TRUE, fig.path='figs/', cache.path='cache/graphics-',
fig.align='center', fig.width = 5, fig.height = 4, fig.show = 'hold',
cache = TRUE, par = TRUE)
library(foreign) #read foreign file objects
install.packages("dplyr", repos = "https://cran.rstudio.com/")
library(dplyr) #manipulate data
install.packages("ggplot2", repos = "https://cran.rstudio.com/")
library(ggplot2) #plot results
install.packages("psych", repos = "https://cran.rstudio.com/")
library(psych) #create summary statistics
library(plyr) #tools for splitting, qpplying and combining data
library(data.table)
require(haven)
library(lubridate)
DAX <- fread('https://chart.finance.yahoo.com/table.csv?s=%5EGDAXI&a=10&b=26&c=1990&d=3&e=27&f=2017&g=d&ignore=.csv')
CDAX <- read.csv("~/hertie-election-forecasting (Akira)/data/^cdax_d.csv")
GfK <- read.csv('~/hertie-election-forecasting (Akira)/GfK.csv')
GFE_Kayser <- read_dta('~/hertie-election-forecasting (Akira)/BundestagForecastReplicationData.dta')
GFE <- read_dta('~/hertie-election-forecasting (Akira)/data/ger_nat.dta')
GFE$Date <- election_date
GFE$Date <- ymd(as.character(GFE$Date))
GFE_Kayser$Date <- as.Date(GFE_Kayser$date, "%d.%m.%Y")
eco.in <- merge(CDAX, GfK, by = "Date")
par(mar = c(5,5,2,5))
with(eco.in, plot(as.Date(Date), Close, type="l", col="red3",
xlab="Year", ylab=expression(CDAX)),
ylim=c(0,1200))
par(new = T)
with(eco.in, plot(as.Date(Date), Actual, type="l", axes=F, col="blue3", xlab="Year", ylab=NA, cex=1.2))
axis(side = 4)
mtext(side = 4, line = 3, 'GfK Consumer Confidence')
legend("topleft",
legend=c(expression(CDAX), "GfK Consumer Confidence"),
lty=1:1, cex=0.39, col=c("red3", "blue3"))
=======
i = 2017
lms_best <- lms[sum_tab$r_squared > .35]
lms_best_predictions <- sapply(lms_best, predict.lm, newdata = filter(ger_df_long, year == i)) %>% t() %>% as.data.frame()
names(lms_best_predictions) <- filter(ger_df_long, year == i)$party
summary(lms_best_predictions)
lms_best_predictions$vote_sums <- rowSums(lms_best_predictions)
lms_best_predictions$vote_sums
lms_best_predictions
hist(lms_best_predictions$vote_sums)
lms_best_predictions <- sapply(lms_best, predict.lm, newdata = filter(ger_df_long, year == i)) %>% t() %>% as.data.frame()
lms_best_predictions <- apply(lms_best_predictions, 1, add, filter(ger_df_long, year == i)$voteshare_l1) %>% t() %>% as.data.frame
names(lms_best_predictions) <- filter(ger_df_long, year == i)$party
summary(lms_best_predictions)
lms_best_predictions$vote_sums <- rowSums(lms_best_predictions)
hist(lms_best_predictions$vote_sums)
summary(lms_best_predictions$vote_sums)
hist(lms_best_predictions$vote_sums)
# prepare formula
vars <- c("voteshare_l1", "major", "chancellor_party", "gov", "parl", "ltw_swing_mean_100_full", "polls_200_230")
fmla <- as.formula(paste("swing ~ ", paste(vars, collapse= "+")))
# run out-of-sample predictions
model_out <- list()
model_pred <- list()
for(i in seq_along(election_year)) {
insample <- filter(ger_df_long, year != election_year[i])
outsample <- filter(ger_df_long, year == election_year[i])
model_out[[i]] <- lm(fmla, data = insample)
model_pred[[i]] <- augment(model_out[[i]], newdata = outsample, type.predict = "response")
}
# run out-of-sample predictions
model_out <- list()
model_pred <- list()
for(i in seq_along(election_year)) {
insample <- filter(ger_df_long, year != election_year[i])
outsample <- filter(ger_df_long, year == election_year[i])
model_out[[i]] <- lm(fmla, data = insample)
model_pred[[i]] <- augment(model_out[[i]], newdata = outsample, type.predict = "response")
}
names(ger_df_long)
election_years
# run out-of-sample predictions
model_out <- list()
model_pred <- list()
for(i in seq_along(election_years)) {
insample <- filter(ger_df_long, year != election_years[i])
outsample <- filter(ger_df_long, year == election_years[i])
model_out[[i]] <- lm(fmla, data = insample)
model_pred[[i]] <- augment(model_out[[i]], newdata = outsample, type.predict = "response")
}
names(ger_df_long)
# prepare formula
vars <- c("voteshare_l1", "major", "chancellor_party", "gov", "parl", "ltw_swing_mean_200_full", "polls_200_230")
fmla <- as.formula(paste("swing ~ ", paste(vars, collapse= "+")))
# run out-of-sample predictions
model_out <- list()
model_pred <- list()
for(i in seq_along(election_years)) {
insample <- filter(ger_df_long, year != election_years[i])
outsample <- filter(ger_df_long, year == election_years[i])
model_out[[i]] <- lm(fmla, data = insample)
model_pred[[i]] <- augment(model_out[[i]], newdata = outsample, type.predict = "response")
}
model_pred_df <- do.call(rbind, model_pred)
model_pred
model_pred_df
View(model_pred_df)
mean(abs(model_pred_df$swing - model_pred_df$.fitted), na.rm = TRUE)
group_by(model_pred_df, party) %>% summarize(mae = mean(abs(swing - .fitted), na.rm = TRUE))
plot(model_pred_df$.fitted, model_pred_df$swing, cex = .5, pch = 20)
text(model_pred_df$.fitted, model_pred_df$swing, paste0(model_pred_df$party, str_sub(as.character(model_pred_df$year), -2, -1)), pos = 3, offset = .15, cex = .6)
grid()
abline(0, 1)
voteshares_pred_list <- list()
elections <- c(2005, 2009, 2013, 2017)
for (i in 1:4) {
model_out <- lm(voteshare ~ chancellor_party + voteshare_l1 + polls_200_230, data = filter(ger_df_long, year < elections[i]))
summary(model_out)
# predicted vote shares
voteshares_pred_df <- data.frame(party = filter(ger_df_long, year == elections[i])$party,
voteshare_true = filter(ger_df_long, year == elections[i])$voteshare,
voteshare_pred = predict(model_out, filter(ger_df_long, year == elections[i])),
se_fit = predict(model_out, filter(ger_df_long, year == elections[i]),  se.fit = TRUE, interval = "prediction")$se.fit,
lwr_conf = predict(model_out, filter(ger_df_long, year == elections[i]), se.fit = TRUE, interval = "confidence")$fit[,"lwr"],
upr_conf = predict(model_out, filter(ger_df_long, year == elections[i]), se.fit = TRUE, interval = "confidence")$fit[,"upr"],
lwr_pred = predict(model_out, filter(ger_df_long, year == elections[i]), se.fit = TRUE, interval = "prediction")$fit[,"lwr"],
upr_pred = predict(model_out, filter(ger_df_long, year == elections[i]), se.fit = TRUE, interval = "prediction")$fit[,"upr"]
)
voteshares_pred_df$se_pred <- sqrt(voteshares_pred_df$se_fit^2+var(model_out$residuals)) # see http://stats.stackexchange.com/questions/154247/what-are-the-formulae-used-in-r-by-predict-lm-when-interval-a-none-b-pred
cat("\n", "Election ", elections[i], "\n")
print(voteshares_pred_df)
voteshares_pred_list[[i]] <- voteshares_pred_df
}
x <- seq(40,60, length=500)
x
kand.1 <- function(x) dnorm(x, mean=36, sd=1)
kand.2 <- function(x) dnorm(x, mean=33, sd=1)
curve(kand.1, from = 30, to = 40, n=500, type="l",lwd=2)
curve(kand.2, from = 30, to = 40, n=500, type="l",lwd=2, col="red", add=T)
text(37, .4, "Kand. 1")
text(34, .4, "Kand. 2", col="red")
diff.mean <- 36 - 33
diff.se <- sqrt(1^2 + 1^2)
pnorm(0, mean=diff.mean, sd=diff.se, lower.tail = TRUE)
?pnorm
pnorm(0, mean=diff.mean, sd=diff.se, lower.tail = TRUE)
pnorm(0, mean=diff.mean, sd=diff.se, lower.tail = F)
pnorm(0, mean=diff.mean, sd=diff.se, lower.tail = T)
curve(kand.1, from = 30, to = 40, n=500, type="l",lwd=2)
curve(kand.2, from = 30, to = 40, n=500, type="l",lwd=2, col="red", add=T)
text(37, .4, "Kand. 1")
text(34, .4, "Kand. 2", col="red")
summary(model_out)
voteshares_pred_list
i
simulate(model_out, 1)
?simulate
sim_df <- simulate(model_out, 100)
View(sim_df)
View(ger_df_long)
model_out <- lm(voteshare ~ chancellor_party + voteshare_l1 + polls_200_230, data = ger_df_long))
model_out <- lm(voteshare ~ chancellor_party + voteshare_l1 + polls_200_230, data = ger_df_long)
View(ger_df_long)
sim_df <- simulate(model_out, 1000)
dim(sim_df)
ger_df_long$voteshare
View(ger_df_long)
voteshare_pred = predict(model_out, filter(ger_df_long, year == 2017))
voteshare_pred
model_out <- lm(voteshare ~ chancellor_party + voteshare_l1 + polls_200_230, data = ger_df_long)
voteshare_pred = predict(model_out, filter(ger_df_long, year == 2017))
ger_df_long %>% filter(year == 2017) %>% select(chancellor_party, voteshare_l1, polls_200_230)
df <- data.frame(x=x<-1:10, y=1.5*x + rnorm(length(x)))
df
voteshare_pred
ger_df_long$pred <- voteshare_pred
ger_df_long_pred <- ger_df_long %>% filter(year == 2017) %>% select(chancellor_party, voteshare_l1, polls_200_230)
ger_df_long_pred$pred <- voteshare_pred
ger_df_long_pred
fit <- lm(pred ~ chancellor_party + voteshare_l1 + polls_200_230, data = ger_df_long_pred)
summary(fit)
model_out <- lm(voteshare ~ chancellor_party + voteshare_l1 + polls_200_230, data = ger_df_long)
simulateX(model_out,  nsim = 4, X = ger_df_long_pred)
simulateX <- function(object, nsim=1, seed=NULL, X, ...) {
object$fitted.values <- X
simulate(object=object, nsim=nsim, seed=seed, ...)
}
simulateX(model_out,  nsim = 4, X = ger_df_long_pred)
model_out$fitted.values
library(Zelig)
install.packages("Zelig")
library(zelig)
library(Zelig)
z5 <- zls$new()
z5$zelig(voteshare ~ chancellor_party + voteshare_l1 + polls_200_230, data = ger_df_long)
z5$setx()
z5$sim()
z5
str(z5)
z5$get_predict
z5$get_predict()
model_out <- lm(voteshare ~ chancellor_party + voteshare_l1 + polls_200_230, data = ger_df_long)
voteshare_pred = predict(model_out, filter(ger_df_long, year == 2017))
voteshare_pred
voteshare_pred = predict(model_out, filter(ger_df_long, year == 2017), type = "response")
voteshare_pred
sim.y <- replicate(10, rnorm(rep(1, length(voteshare_pred)), voteshare_pred))
sim.y
sim.y <- replicate(1000, rnorm(rep(1, length(voteshare_pred)), voteshare_pred))
voteshare_pred_sim <- replicate(1000, rnorm(rep(1, length(voteshare_pred)), voteshare_pred))
hist(voteshare_pred_sim[1,])
voteshare_pred_sim <- replicate(1000, rnorm(rep(1, length(voteshare_pred)), voteshare_pred)) %>% t()
voteshare_pred_sim
voteshare_pred_sim <- replicate(1000, rnorm(rep(1, length(voteshare_pred)), voteshare_pred)) %>% t() %>% as.data.frame
names(voteshare_pred_sim)
filter(ger_df_long, year == 2017)
filter(ger_df_long, year == 2017)$party
filter(ger_df_long, year == 2017)$party %>% as.character
names(voteshare_pred_sim) <- filter(ger_df_long, year == 2017)$party %>% as.character
plot(density(voteshare_pred_sim$cdu))
lines(density(voteshare_pred_sim$spd), col = "red")
density(voteshare_pred_sim$spd)
plot(density(voteshare_pred_sim$cdu), xlim = c(23, 42))
lines(density(voteshare_pred_sim$spd), col = "red")
?rnorm
rep(1, length(voteshare_pred))
voteshare_pred
rep(1, length(voteshare_pred))
voteshare_pred
voteshare_pred
?predict
voteshare_pred_se = predict(model_out, filter(ger_df_long, year == 2017), se.fit = TRUE)
voteshare_pred_se
voteshare_pred_se = predict(model_out, filter(ger_df_long, year == 2017), se.fit = TRUE, interval = "prediction")
voteshare_pred_se
voteshare_pred_se = predict(model_out, filter(ger_df_long, year == 2017), se.fit = TRUE, interval = "prediction")
voteshare_pred_se <- predict(model_out, filter(ger_df_long, year == 2017), se.fit = TRUE, interval = "prediction")
voteshare_pred_se
predict(model_out, filter(ger_df_long, year == 2017), se.fit = TRUE, interval = "prediction")
predict(model_out, filter(ger_df_long, year == 2017), se.fit = TRUE, interval = "confidence")
voteshare_pred <- predict(model_out, filter(ger_df_long, year == 2017), se.fit = TRUE, interval = "prediction")
voteshare_pred$fit
voteshare_pred$fit$fit
voteshare_pred$fit[,"fit"]
sqrt(voteshare_pred$se_fit^2+var(model_out$residuals))
voteshare_pred$se_fit
voteshare_pred <- predict(model_out, filter(ger_df_long, year == 2017), se.fit = TRUE, interval = "prediction")
voteshare_pred
voteshare_pred$se_fit^2
sqrt(voteshare_pred$se.fit^2+var(model_out$residuals))
voteshare_pred_sim <- replicate(1000, rnorm(rep(1, length(voteshare_pred)), mean = voteshare_pred$fit[,"fit"], sd = sqrt(voteshare_pred$se.fit^2+var(model_out$residuals)))) %>% t() %>% as.data.frame
voteshare_pred_sim
names(voteshare_pred_sim) <- filter(ger_df_long, year == 2017)$party %>% as.character
dim(voteshare_pred_sim)
length(voteshare_pred)
voteshare_pred_sim <- replicate(1000, rnorm(rep(1, length(voteshare_pred$fit[,"fit"])), mean = voteshare_pred$fit[,"fit"], sd = sqrt(voteshare_pred$se.fit^2+var(model_out$residuals)))) %>% t() %>% as.data.frame
names(voteshare_pred_sim) <- filter(ger_df_long, year == 2017)$party %>% as.character
plot(density(voteshare_pred_sim$cdu), xlim = c(23, 42))
lines(density(voteshare_pred_sim$spd), col = "red")
plot(density(voteshare_pred_sim$cdu), xlim = c(20, 50))
lines(density(voteshare_pred_sim$spd), col = "red")
voteshare_pred_sim$cdu > voteshare_pred_sim$spd
table(voteshare_pred_sim$cdu > voteshare_pred_sim$spd)
prop.table(voteshare_pred_sim$cdu > voteshare_pred_sim$spd)
prop.table(table(voteshare_pred_sim$cdu > voteshare_pred_sim$spd))
names(voteshare_pred_sim)
prop.table(table(voteshare_pred_sim$fdp < 0.05))
voteshare_pred$fit[,"fit"]
names(voteshare_pred_sim)
prop.table(table(voteshare_pred_sim$fdp < 5))
prop.table(table(voteshare_pred_sim$gru < 5))
source("packages.r")
source("functions.r")
### prepare data --------------------------------------------
# import historical data
load("./data/election_dates.RData")
election_date
election_year
ger_df <- read_dta("./data/ger_nat.dta")
View(ger_df)
123
as.character(123)
as.numeric(as.character(123))
char <- function(x) as.character(x)
num <- function(x) as.numeric(x)
char(123)
simpleCap <- function(x) {
s <- strsplit(x, " ")[[1]]
paste(toupper(substring(s, 1,1)), substring(s, 2),
sep="", collapse=" ")
}
simpleCap("die linke")
simpleCap("die LINKE")
simpleCap <- function(x) {
s <- strsplit(x, " ")[[1]]
s <- tolower(s)
paste(toupper(substring(s, 1,1)), substring(s, 2),
sep="", collapse=" ")
}
simpleCap("die LINKE")
recode_partynames <- function(x, longnames = FALSE) {
require(stringr)
x_recoded <- x %>% str_replace("cdu", "Union") %>%
str_replace("fdp", "FDP") %>%
str_replace("spd", "SPD") %>%
str_replace("gru", "Grüne") %>%
str_replace("lin", "Die Linke") %>%
str_replace("afd", "AfD") %>%
str_replace("oth", "Andere")
if(longnames == TRUE) {
x_recoded <- x_recoded %>% str_replace("Grüne", "B'90/Die Grünen") %>% str_replace("Union", "CDU/CSU") %>% str_replace("Linke", "Die Linke")
}
x_recoded
}
recode_partynames(c("cdu", "spd", "fdp", "gru", "die partei"))
recode_partynames(c("cdu", "spd", "fdp", "gru", "die partei"), longnames = T)
?read_dta
?read.csv
load("./data/election_dates.RData")
election_date
election_year
?save
save(election_date, election_year, file = "./data/election_dates.RData")
ger_df <- read_dta("./data/ger_nat.dta")
View(ger_df)
ger_df$spd_gov
ger_df$spd_gov[ger_df$year == 2005]
ger_df$spd_gov[ger_df$year == 2005] <- 1
# corrections of government variables
ger_df$spd_gov[ger_df$year == 1965] <- 1
ger_df$fdp_gov[ger_df$year == 1980] <- 1
ger_df$spd_gov[ger_df$year == 2005] <- 1
names(ger_df)
ger_df$npd_share <- NULL
ger_df$npd_seats <- NULL
names(ger_df)
ger_df <- mutate(ger_df, oth_share = 100 - cdsu_share - spd_share - fdp_share - gru_share - lin_share - afd_share)  # create voteshare for others
View(ger_df)
select(ger_df, ends_with("_share"), year)
?gather
ger_df_long <- select(ger_df, ends_with("_share"), year) %>%
select(-contains("gov_share")) %>%
gather(key = "party", value = "voteshare")
View(ger_df_long)
voteshare_vars <- str_subset(names(ger_df), "^(?!.*gov).*_share$")
gov_vars <- str_subset(names(ger_df), "_gov$")
ger_df_long <- melt(ger_df, id.vars = c("year", "turnout", "chancellor", "unemp", "chancellor_polls", "term", gov_vars) , measure.vars = voteshare_vars, value.name = "voteshare")
ger_df_long <- rename(ger_df_long, party = variable)
View(ger_df_long)
ger_df_long$party
ger_df_long$party <- str_extract(ger_df_long$party, "[:alpha:]+")
ger_df_long$party
ger_df_long$party <- str_replace(ger_df_long$party, "_share", "")
ger_df_long$party
ger_df_long$party <- str_replace(ger_df_long$party, "cdsu", "cdu")
ger_df_long$year
# gen election id
elections_df <- data.frame(year = unique(ger_df_long$year), election = seq_along(unique(ger_df_long$year)))
ger_df_long <- merge(ger_df_long, elections_df, by = c("year"), all.x = TRUE)
# gen party id
ger_df_long$party <- str_extract(ger_df_long$party, "[:alpha:]+")
ger_df_long$party <- str_replace(ger_df_long$party, "cdsu", "cdu")
# gen election id
elections_df <- data.frame(year = unique(ger_df_long$year), election = seq_along(unique(ger_df_long$year)))
ger_df_long <- merge(ger_df_long, elections_df, by = c("year"), all.x = TRUE)
# gen lag vars
ger_df_long <- group_by(ger_df_long, party) %>% arrange(year) %>% mutate(voteshare_l1 = lag(voteshare, 1), voteshare_l2 = lag(voteshare, 2), voteshare_l3 = lag(voteshare, 3), chancellor = lag(chancellor, 1), unemp_l1 = lag(unemp, 1))
View(ger_df_long)
# make df long
ger_df_long <- select(ger_df, ends_with("_share"), year) %>%
select(-contains("gov_share")) %>%
gather(key = "party", value = "voteshare")
voteshare_vars <- str_subset(names(ger_df), "^(?!.*gov).*_share$")
gov_vars <- str_subset(names(ger_df), "_gov$")
ger_df_long <- melt(ger_df, id.vars = c("year", "turnout", "chancellor", "unemp", "chancellor_polls", "term", gov_vars) , measure.vars = voteshare_vars, value.name = "voteshare")
ger_df_long <- rename(ger_df_long, party = variable)
# gen party id
ger_df_long$party <- str_extract(ger_df_long$party, "[:alpha:]+")
ger_df_long$party <- str_replace(ger_df_long$party, "cdsu", "cdu")
# gen election id
elections_df <- data.frame(year = unique(ger_df_long$year), election = seq_along(unique(ger_df_long$year)))
ger_df_long <- merge(ger_df_long, elections_df, by = c("year"), all.x = TRUE)
# gen lag vars
ger_df_long <- group_by(ger_df_long, party) %>% arrange(year) %>% mutate(voteshare_l1 = lag(voteshare, 1), voteshare_l2 = lag(voteshare, 2), voteshare_l3 = lag(voteshare, 3), chancellor = lag(chancellor, 1), unemp_l1 = lag(unemp, 1))
# generate swing variable
ger_df_long$swing <- ger_df_long$voteshare - ger_df_long$voteshare_l1
ger_df_long <- group_by(ger_df_long, party) %>% arrange(year) %>% mutate(swing_l1 = lag(swing, 1))
View(ger_df_long)
select(ger_df_long, year, voteshare, voteshare_l1, swing, swing_l1)
select(ger_df_long, year, voteshare, voteshare_l1, swing, swing_l1) %% View()
select(ger_df_long, year, voteshare, voteshare_l1, swing, swing_l1) %>% View
# generate swing variable
ger_df_long$swing <- ger_df_long$voteshare - ger_df_long$voteshare_l1
ger_df_long <- group_by(ger_df_long, party) %>% arrange(year) %>% mutate(swing_l1 = lag(swing, 1))
ger_df_long$party
ger_df_long$chancellor
ger_df_long$chancellor_party <- ifelse(ger_df_long$party == ger_df_long$chancellor, 1, 0)
ger_df_long$major <- ifelse(ger_df_long$party == "spd" | ger_df_long$party == "cdu", 1, 0)
ger_df_long <- group_by(ger_df_long, party) %>% arrange(year) %>% mutate(cdsu_gov = lag(cdsu_gov, 1), spd_gov = lag(spd_gov, 1), fdp_gov = lag(fdp_gov, 1), gru_gov = lag(gru_gov, 1))
ger_df_long <- ungroup(ger_df_long)
View(ger_df_long)
# generate swing variable
ger_df_long$swing <- ger_df_long$voteshare - ger_df_long$voteshare_l1
ger_df_long <- group_by(ger_df_long, party) %>% arrange(year) %>% mutate(swing_l1 = lag(swing, 1))
# gen chancellor party indicator
ger_df_long$chancellor_party <- ifelse(ger_df_long$party == ger_df_long$chancellor, 1, 0)
# gen major party indicator
ger_df_long$major <- ifelse(ger_df_long$party == "spd" | ger_df_long$party == "cdu", 1, 0)
# gen government-opposition indicator
ger_df_long <- group_by(ger_df_long, party) %>% arrange(year) %>% mutate(cdsu_gov = lag(cdsu_gov, 1), spd_gov = lag(spd_gov, 1), fdp_gov = lag(fdp_gov, 1), gru_gov = lag(gru_gov, 1))
ger_df_long <- ungroup(ger_df_long)
ger_df_long <- mutate(ger_df_long, gov = ifelse(party == "cdu" & cdsu_gov == 1, 1,
ifelse(party == "spd" & spd_gov == 1, 1,
ifelse(party == "fdp" & fdp_gov == 1, 1,
ifelse(party == "gru" & gru_gov == 1, 1, 0)))))
ger_df_long <- group_by(ger_df_long, party) %>% arrange(year) %>% mutate(cdsu_gov = lag(cdsu_gov, 1), spd_gov = lag(spd_gov, 1), fdp_gov = lag(fdp_gov, 1), gru_gov = lag(gru_gov, 1))
ger_df_long <- ungroup(ger_df_long)
ger_df_long <- mutate(ger_df_long, gov = ifelse(party == "cdu" & cdsu_gov == 1, 1,
ifelse(party == "spd" & spd_gov == 1, 1,
ifelse(party == "fdp" & fdp_gov == 1, 1,
ifelse(party == "gru" & gru_gov == 1, 1, 0)))))
# gen parliament indicator
ger_df_long$parl <- ifelse(ger_df_long$voteshare_l1 >= 5, 1, 0)
ger_df_long$parl[ger_df_long$party ==  "lin" & ger_df_long$year == 1994] <- 1
ger_df_long$parl[ger_df_long$party ==  "lin" & ger_df_long$year == 1998] <- 1
ger_df_long$parl[ger_df_long$party ==  "lin" & ger_df_long$year == 2002] <- 1
ger_df_long$parl[ger_df_long$party ==  "lin" & ger_df_long$year == 2005] <- 1
ger_df_long$unemp_swing <- ger_df_long$unemp - ger_df_long$unemp_l1
ltw_df <- read_dta("./data/election_results_ltw_agg.dta")
ger_df_long <- merge(ger_df_long, polls_df_agg, by.x = c("year", "party"), by.y = c("election", "party"), all.x = TRUE)
ger_df_long <- merge(ger_df_long, ltw_df, by.x = c("year", "party"), by.y = c("election", "party"), all.x = TRUE)
# make df long
ger_df_long <- select(ger_df, ends_with("_share"), year) %>%
select(-contains("gov_share")) %>%
gather(key = "party", value = "voteshare")
voteshare_vars <- str_subset(names(ger_df), "^(?!.*gov).*_share$")
gov_vars <- str_subset(names(ger_df), "_gov$")
ger_df_long <- melt(ger_df, id.vars = c("year", "turnout", "chancellor", "unemp", "chancellor_polls", "term", gov_vars) , measure.vars = voteshare_vars, value.name = "voteshare")
ger_df_long <- rename(ger_df_long, party = variable)
# gen party id
ger_df_long$party <- str_extract(ger_df_long$party, "[:alpha:]+")
ger_df_long$party <- str_replace(ger_df_long$party, "cdsu", "cdu")
# gen election id
elections_df <- data.frame(year = unique(ger_df_long$year), election = seq_along(unique(ger_df_long$year)))
ger_df_long <- merge(ger_df_long, elections_df, by = c("year"), all.x = TRUE)
# gen lag vars
ger_df_long <- group_by(ger_df_long, party) %>% arrange(year) %>% mutate(voteshare_l1 = lag(voteshare, 1), voteshare_l2 = lag(voteshare, 2), voteshare_l3 = lag(voteshare, 3), chancellor = lag(chancellor, 1), unemp_l1 = lag(unemp, 1))
# generate swing variable
ger_df_long$swing <- ger_df_long$voteshare - ger_df_long$voteshare_l1
ger_df_long <- group_by(ger_df_long, party) %>% arrange(year) %>% mutate(swing_l1 = lag(swing, 1))
# gen chancellor party indicator
ger_df_long$chancellor_party <- ifelse(ger_df_long$party == ger_df_long$chancellor, 1, 0)
# gen major party indicator
ger_df_long$major <- ifelse(ger_df_long$party == "spd" | ger_df_long$party == "cdu", 1, 0)
# gen government-opposition indicator
ger_df_long <- group_by(ger_df_long, party) %>% arrange(year) %>% mutate(cdsu_gov = lag(cdsu_gov, 1), spd_gov = lag(spd_gov, 1), fdp_gov = lag(fdp_gov, 1), gru_gov = lag(gru_gov, 1))
ger_df_long <- ungroup(ger_df_long)
ger_df_long <- mutate(ger_df_long, gov = ifelse(party == "cdu" & cdsu_gov == 1, 1,
ifelse(party == "spd" & spd_gov == 1, 1,
ifelse(party == "fdp" & fdp_gov == 1, 1,
ifelse(party == "gru" & gru_gov == 1, 1, 0)))))
# gen parliament indicator
ger_df_long$parl <- ifelse(ger_df_long$voteshare_l1 >= 5, 1, 0)
ger_df_long$parl[ger_df_long$party ==  "lin" & ger_df_long$year == 1994] <- 1
ger_df_long$parl[ger_df_long$party ==  "lin" & ger_df_long$year == 1998] <- 1
ger_df_long$parl[ger_df_long$party ==  "lin" & ger_df_long$year == 2002] <- 1
ger_df_long$parl[ger_df_long$party ==  "lin" & ger_df_long$year == 2005] <- 1
# gen unemp swing indicator
ger_df_long$unemp_swing <- ger_df_long$unemp - ger_df_long$unemp_l1
# add ltw swing indicators
ltw_df <- read_dta("./data/election_results_ltw_agg.dta")
ger_df_long <- merge(ger_df_long, ltw_df, by.x = c("year", "party"), by.y = c("election", "party"), all.x = TRUE)
View(ger_df_long)
# add polling indicators
load("./data/polls_df_agg.RData")
ger_df_long <- merge(ger_df_long, polls_df_agg, by.x = c("year", "party"), by.y = c("election", "party"), all.x = TRUE)
ger_df_long$polls_70_100[is.na(ger_df_long$polls_70_100)] <- ger_df_long$polls_1_30[is.na(ger_df_long$polls_70_100)] # ad hoc replacement of missing polling data with later polling data
ger_df_long$polls_100_130[is.na(ger_df_long$polls_100_130)] <- ger_df_long$polls_70_100[is.na(ger_df_long$polls_100_130)] # ad hoc replacement of missing polling data with later polling data
ger_df_long$polls_170_200[is.na(ger_df_long$polls_170_200)] <- ger_df_long$polls_100_130[is.na(ger_df_long$polls_170_200)] # ad hoc replacement of missing polling data with later polling data
ger_df_long$polls_200_230[is.na(ger_df_long$polls_200_230)] <- ger_df_long$polls_170_200[is.na(ger_df_long$polls_200_230)] # ad hoc replacement of missing polling data with later polling data
ger_df_long$polls_200_230_swing <- ger_df_long$polls_200_230 - ger_df_long$voteshare_l1
ger_df_long$voteshare_l1_3 <- rowMeans(select(ger_df_long, voteshare_l1, voteshare_l2, voteshare_l3), na.rm = TRUE)
View(ger_df_long)
ger_df_long$voteshare
ger_df_long <- filter(ger_df_long, voteshare != 0 | is.na(voteshare))
ger_df_sub <- select(ger_df_long, voteshare, voteshare_l1, chancellor_party, polls_200_230)
head(ger_df_sub)
summary(ger_df_long)
summary(ger_df_sub)
stargazer(ger_df_sub, title = "Summary statistics", type = "latex", out = "figures/sumstats.tex")
stargazer(ger_df_sub, title = "Summary statistics", type = "html", out = "figures/sumstats.tex")
stargazer(ger_df_sub, title = "Summary statistics", type = "html", out = "figures/sumstats.html")
browseURL("http://jakeruss.com/cheatsheets/stargazer.html")
table(ger_df_long$party)
table(ger_df_long$gov, ger_df_long$party)
rownames(tab) <- c("Not in government", "In government")
tab <- table(ger_df_long$gov, ger_df_long$party)
rownames(tab) <- c("Not in government", "In government")
colnames(tab) <- recode_partynames(colnames(tab))
tab
tab <- tab[,c(2, 7, 3, 4, 5, 1, 6)]
tab
plot(ger_df_sub)
plot(ger_df_long$voteshare_l1, ger_df_long$voteshare)
# make it nicer
pdf(file="figures/pred_past_voteshare.pdf", height=7, width=7, family="URWTimes")
par(oma=c(0,0.5,0.5,0.5))
par(mar=c(4, 4, 3, 0))
par(pty="s")
# past vote share
plot(ger_df_long$voteshare_l1, ger_df_long$voteshare, xaxt = "n", yaxt = "n", xlab = "", ylab = "", main = "", xlim = c(0, 50), ylim = c(0, 50))
axis(1, seq(0, 100, 10), seq(0, 100, 10))
axis(1, 25, "Lag vote share (%)", line = 1, tick = F)
axis(2, seq(0, 100, 10), seq(0, 100, 10))
axis(2, 25, "Vote share (%)", line = 1, tick = F)
# run model, add regression line
model_out <- lm(voteshare ~ voteshare_l1 - 1, data = ger_df_long)
model_out_aug <- augment(model_out)
model_out_aug$case_label <- paste(ger_df_long$party, ger_df_long$year, sep = " ") %>% recode_partynames(longnames = FALSE) %>% .[model_out_aug$.rownames %>% num()] %>% recode_years
abline(model_out, lty = 2)
# identify important outliers
obs_id <- abs(model_out_aug$.std.resid) > 1.53
points(model_out_aug$voteshare_l1[obs_id], model_out_aug$voteshare[obs_id], pch = 20)
# plot labels of outliers based on resid or cooksd
label_position <- ifelse(model_out_aug$.resid > 0, 3, 1)
text(model_out_aug$voteshare_l1[obs_id], model_out_aug$voteshare[obs_id], label = model_out_aug$case_label[obs_id], cex = .7, pos = label_position[obs_id], offset = .47)
grid()
dev.off()
# make it nicer
pdf(file="figures/pred_past_chancellor.pdf", height=7, width=7, family="URWTimes")
par(oma=c(0,0.5,0.5,0.5))
par(mar=c(4, 4, 3, 0))
par(pty="s")
dat <- filter(ger_df_long, major == 1)
dat$chancellor_party_lab <- ifelse(dat$chancellor_party == 0, "no chancellor party", "chancellor party")
plot(dat$chancellor_party,  dat$voteshare, xaxt = "n", yaxt = "n", xlab = "", ylab = "", main = "", xlim = c(-.5, 1.5), ylim = c(20, 52))
axis(2, seq(0, 100, 10), seq(0, 100, 10))
axis(1, seq(0, 1, 1), c("No chancellor party", "Chancellor party"), tick = F)
axis(2, 35, "Vote share (%)", line = 1, tick = F)
# run model, add regression line
model_out <- lm(voteshare ~ chancellor_party, data = dat)
model_out_aug <- augment(model_out)
model_out_aug$case_label <- paste(dat$party, dat$year, sep = " ") %>% recode_partynames(longnames = FALSE) %>% .[model_out_aug$.rownames %>% num()] %>% recode_years
abline(model_out, lty = 2)
# identify important outliers
model_out_aug <- group_by(model_out_aug, chancellor_party) %>% arrange(.std.resid) %>% mutate(label_position = c(4, rep(c(2, 4), 8))) %>% ungroup
obs_id <- abs(model_out_aug$.std.resid) > 1.3
points(model_out_aug$chancellor_party[obs_id], model_out_aug$voteshare[obs_id], pch = 20)
# plot labels of outliers based on resid or cooksd
text(model_out_aug$chancellor_party[obs_id], model_out_aug$voteshare[obs_id], label = model_out_aug$case_label[obs_id], cex = .7, pos = model_out_aug$label_position[obs_id], offset = .47)
grid()
dev.off()
?group_by
>>>>>>> simonmunzert/master
