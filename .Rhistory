grid()
par(mar=c(3, 15, 3, 11))
# Kanzlerpartei
dat <- filter(ger_df_long, major == 1)
dat$chancellor_party_lab <- ifelse(dat$chancellor_party == 0, "keine Kanzlerpartei", "Kanzlerpartei")
plot(dat$chancellor_party,  dat$voteshare, xaxt = "n", yaxt = "n", xlab = "", ylab = "", main = "(c)", xlim = c(-.5, 1.5), ylim = c(20, 52))
axis(2, seq(0, 100, 10), seq(0, 100, 10))
axis(1, seq(0, 1, 1), c("keine Kanzlerpartei", "Kanzlerpartei"), tick = F)
axis(2, 35, "Stimmenanteil (%)", line = 1, tick = F)
# run model, add regression line
model_out <- lm(voteshare ~ chancellor_party, data = dat)
model_out_aug <- augment(model_out)
model_out_aug$case_label <- paste(dat$party, dat$year, sep = " ") %>% recode_partynames(longnames = FALSE) %>% .[model_out_aug$.rownames %>% num()] %>% recode_years
abline(model_out, lty = 2)
# identify important outliers
model_out_aug <- group_by(model_out_aug, chancellor_party) %>% arrange(.std.resid) %>% mutate(label_position = c(4, rep(c(2, 4), 8))) %>% ungroup
obs_id <- abs(model_out_aug$.std.resid) > 1.3
points(model_out_aug$chancellor_party[obs_id], model_out_aug$voteshare[obs_id], pch = 20)
# plot labels of outliers based on resid or cooksd
text(model_out_aug$chancellor_party[obs_id], model_out_aug$voteshare[obs_id], label = model_out_aug$case_label[obs_id], cex = .7, pos = model_out_aug$label_position[obs_id], offset = .47)
grid()
dev.off()
pdf(file="figures/pred_past_voteshare.pdf", height=9, width=8, family="URWTimes")
par(oma=c(0,0.5,0.5,0.5))
par(mar=c(4, 4, 3, 0))
par(pty="s")
# past vote share
plot(ger_df_long$voteshare_l1, ger_df_long$voteshare, xaxt = "n", yaxt = "n", xlab = "", ylab = "", main = "(a)", xlim = c(0, 50), ylim = c(0, 50))
axis(1, seq(0, 100, 10), seq(0, 100, 10))
axis(1, 25, "Lag vote share (%)", line = 1, tick = F)
axis(2, seq(0, 100, 10), seq(0, 100, 10))
axis(2, 25, "Vote share (%)", line = 1, tick = F)
# run model, add regression line
model_out <- lm(voteshare ~ voteshare_l1 - 1, data = ger_df_long)
model_out_aug <- augment(model_out)
model_out_aug$case_label <- paste(ger_df_long$party, ger_df_long$year, sep = " ") %>% recode_partynames(longnames = FALSE) %>% .[model_out_aug$.rownames %>% num()] %>% recode_years
abline(model_out, lty = 2)
# identify important outliers
obs_id <- abs(model_out_aug$.std.resid) > 1.53
points(model_out_aug$voteshare_l1[obs_id], model_out_aug$voteshare[obs_id], pch = 20)
# plot labels of outliers based on resid or cooksd
label_position <- ifelse(model_out_aug$.resid > 0, 3, 1)
text(model_out_aug$voteshare_l1[obs_id], model_out_aug$voteshare[obs_id], label = model_out_aug$case_label[obs_id], cex = .7, pos = label_position[obs_id], offset = .47)
grid()
dev.off()
pdf(file="figures/pred_past_voteshare.pdf", height=7, width=7, family="URWTimes")
par(oma=c(0,0.5,0.5,0.5))
par(mar=c(4, 4, 3, 0))
par(pty="s")
# past vote share
plot(ger_df_long$voteshare_l1, ger_df_long$voteshare, xaxt = "n", yaxt = "n", xlab = "", ylab = "", main = "(a)", xlim = c(0, 50), ylim = c(0, 50))
axis(1, seq(0, 100, 10), seq(0, 100, 10))
axis(1, 25, "Lag vote share (%)", line = 1, tick = F)
axis(2, seq(0, 100, 10), seq(0, 100, 10))
axis(2, 25, "Vote share (%)", line = 1, tick = F)
# run model, add regression line
model_out <- lm(voteshare ~ voteshare_l1 - 1, data = ger_df_long)
model_out_aug <- augment(model_out)
model_out_aug$case_label <- paste(ger_df_long$party, ger_df_long$year, sep = " ") %>% recode_partynames(longnames = FALSE) %>% .[model_out_aug$.rownames %>% num()] %>% recode_years
abline(model_out, lty = 2)
# identify important outliers
obs_id <- abs(model_out_aug$.std.resid) > 1.53
points(model_out_aug$voteshare_l1[obs_id], model_out_aug$voteshare[obs_id], pch = 20)
# plot labels of outliers based on resid or cooksd
label_position <- ifelse(model_out_aug$.resid > 0, 3, 1)
text(model_out_aug$voteshare_l1[obs_id], model_out_aug$voteshare[obs_id], label = model_out_aug$case_label[obs_id], cex = .7, pos = label_position[obs_id], offset = .47)
grid()
dev.off()
pdf(file="figures/pred_past_voteshare.pdf", height=7, width=7, family="URWTimes")
par(oma=c(0,0.5,0.5,0.5))
par(mar=c(4, 4, 3, 0))
par(pty="s")
# past vote share
plot(ger_df_long$voteshare_l1, ger_df_long$voteshare, xaxt = "n", yaxt = "n", xlab = "", ylab = "", main = "", xlim = c(0, 50), ylim = c(0, 50))
axis(1, seq(0, 100, 10), seq(0, 100, 10))
axis(1, 25, "Lag vote share (%)", line = 1, tick = F)
axis(2, seq(0, 100, 10), seq(0, 100, 10))
axis(2, 25, "Vote share (%)", line = 1, tick = F)
# run model, add regression line
model_out <- lm(voteshare ~ voteshare_l1 - 1, data = ger_df_long)
model_out_aug <- augment(model_out)
model_out_aug$case_label <- paste(ger_df_long$party, ger_df_long$year, sep = " ") %>% recode_partynames(longnames = FALSE) %>% .[model_out_aug$.rownames %>% num()] %>% recode_years
abline(model_out, lty = 2)
# identify important outliers
obs_id <- abs(model_out_aug$.std.resid) > 1.53
points(model_out_aug$voteshare_l1[obs_id], model_out_aug$voteshare[obs_id], pch = 20)
# plot labels of outliers based on resid or cooksd
label_position <- ifelse(model_out_aug$.resid > 0, 3, 1)
text(model_out_aug$voteshare_l1[obs_id], model_out_aug$voteshare[obs_id], label = model_out_aug$case_label[obs_id], cex = .7, pos = label_position[obs_id], offset = .47)
grid()
dev.off()
summary(ger_df_long)
hist(ger_df_long$voteshare)
names(ger_df_long)
table(ger_df_long$party)
ger_df_long %% group_by(party)
ger_df_long %>% group_by(party)
ger_df_long %>% group_by(party) %>% hist
ger_df_long %>% group_by(party) %>% hist(.$voteshare)
ger_df_long %>% group_by(party) %>% hist(.$turnout)
group_by(party)
foo <- ger_df_long %>% group_by(party)
foo
plot(ger_df_long$voteshare_l1, ger_df_long$voteshare)
table(party)
table(ger_df_long$party)
par(mfrow = c(3, 3))
for (i in unique(party)) {
filter(ger_df_long, party == i) %>% hist(.$voteshare)
}
par(mfrow = c(3, 3))
for (i in unique(ger_df_long$party)) {
filter(ger_df_long, party == i) %>% hist(.$voteshare)
}
names(ger_df_long)
ger_df_long$voteshare
class(ger_df_long$voteshare)
foo <- ger_df_long %>% group_by(party)
foo
foo$voteshare
?hist
ger_df_long %>% group_by(party) %>% hist(voteshare)
ger_df_long %>% group_by(party) %>% hist()
par(mfrow = c(3, 3))
for (i in unique(ger_df_long$party)) {
dat <- filter(ger_df_long, party == i)
hist(dat$voteshare)
}
par(mfrow = c(3, 3))
for (i in unique(ger_df_long$party)) {
dat <- filter(ger_df_long, party == i)
hist(dat$voteshare, main = i)
}
par(mfrow = c(3, 3))
for (i in unique(ger_df_long$party)) {
dat <- filter(ger_df_long, party == i)
hist(dat$voteshare, main = i)
}
unique(ger_df_long$party)
table(ger_df_long$party)
names(ger_df_long)
# make it nicer
pdf(file="figures/pred_past_chancellor.pdf", height=7, width=7, family="URWTimes")
par(oma=c(0,0.5,0.5,0.5))
par(mar=c(4, 4, 3, 0))
par(pty="s")
dat <- filter(ger_df_long, major == 1)
dat$chancellor_party_lab <- ifelse(dat$chancellor_party == 0, "no chancellor party", "chancellor party")
plot(dat$chancellor_party,  dat$voteshare, xaxt = "n", yaxt = "n", xlab = "", ylab = "", main = "(c)", xlim = c(-.5, 1.5), ylim = c(20, 52))
axis(2, seq(0, 100, 10), seq(0, 100, 10))
axis(1, seq(0, 1, 1), c("No chancellor party", "Chancellor party"), tick = F)
axis(2, 35, "Vote share (%)", line = 1, tick = F)
# run model, add regression line
model_out <- lm(voteshare ~ chancellor_party, data = dat)
model_out_aug <- augment(model_out)
model_out_aug$case_label <- paste(dat$party, dat$year, sep = " ") %>% recode_partynames(longnames = FALSE) %>% .[model_out_aug$.rownames %>% num()] %>% recode_years
abline(model_out, lty = 2)
# identify important outliers
model_out_aug <- group_by(model_out_aug, chancellor_party) %>% arrange(.std.resid) %>% mutate(label_position = c(4, rep(c(2, 4), 8))) %>% ungroup
obs_id <- abs(model_out_aug$.std.resid) > 1.3
points(model_out_aug$chancellor_party[obs_id], model_out_aug$voteshare[obs_id], pch = 20)
# plot labels of outliers based on resid or cooksd
text(model_out_aug$chancellor_party[obs_id], model_out_aug$voteshare[obs_id], label = model_out_aug$case_label[obs_id], cex = .7, pos = model_out_aug$label_position[obs_id], offset = .47)
grid()
dev.off()
par(mfrow = c(3, 3))
for (i in unique(ger_df_long$party)) {
dat <- filter(ger_df_long, party == i)
hist(dat$voteshare, main = i)
}
par(mfrow = c(1, 1))
for (i in unique(ger_df_long$party)) {
dat <- filter(ger_df_long, party == i)
hist(dat$voteshare, main = i)
}
par(mfrow = c(2, 2))
for (i in unique(ger_df_long$party)) {
dat <- filter(ger_df_long, party == i)
hist(dat$voteshare, main = i)
}
par(mfrow = c(2, 2))
for (i in unique(ger_df_long$party)) {
dat <- filter(ger_df_long, party == i)
plot(dat$voteshare, main = i)
}
density(dat$voteshare)
?density
density(dat$voteshare, na.rm = TRUE)
plot(density(dat$voteshare, na.rm = TRUE))
dev.off()
plot(density(dat$voteshare, na.rm = TRUE))
par(mfrow = c(3, 3))
for (i in unique(ger_df_long$party)) {
dat <- filter(ger_df_long, party == i)
plot(density(dat$voteshare, na.rm = TRUE), main = i)
}
table(ger_df_long$party)
par(mfrow = c(2, 3))
for (i in unique(ger_df_long$party)) {
dat <- filter(ger_df_long, party == i)
if(nrow(dat > 2)) {
plot(density(dat$voteshare, na.rm = TRUE), main = i)
}
}
ger_df_sub <- select(ger_df_long, voteshare, voteshare_l1, chancellor_party, polls_200_230)
summary(v)
summary(ger_df_sub)
library(xtable)
xtable(ger_df_sub)
xtable(summary(ger_df_sub))
library(stargazer)
install.packages("stargazer")
library(stargazer)
stargazer(ger_df_sub)
?stargazer
stargazer(ger_df_sub, title = "Summary statistics", type = "latex", out = "figures/sumstats.tex")
summary(ger_df_long)
warnings()
plot(ger_df_sub)
table(ger_df_long$party)
names(ger_df_long)
table(ger_df_long$gov)
table(ger_df_long$party, ger_df_long$gov)
### import data ------------------------
load("./data/ger_model_df.RData")
# prepare election ids
election_years <- unique(ger_df_long$year)
election_years_id <- seq_along(election_years)
election_years_df <- data.frame(year = election_years, election_id = election_years_id)
### import data ------------------------
load("./data/ger_model_df.dta")
# prepare election ids
election_years <- unique(ger_df_long$year)
election_years_id <- seq_along(election_years)
election_years_df <- data.frame(year = election_years, election_id = election_years_id)
### run models on full sample -----------
model_out <- lm(swing ~ chancellor_party + voteshare_l1 + polls_200_230, data = ger_df_long)
model_out <- lm(voteshare ~ chancellor_party + voteshare_l1 + polls_200_230, data = ger_df_long)
summary(model_out)
load("./data/ger_model_df.dta")
read_dta("./data/ger_model_df.dta")
ger_df_long <- read_dta("./data/ger_model_df.dta")
# prepare election ids
election_years <- unique(ger_df_long$year)
election_years_id <- seq_along(election_years)
election_years_df <- data.frame(year = election_years, election_id = election_years_id)
### run models on full sample -----------
model_out <- lm(swing ~ chancellor_party + voteshare_l1 + polls_200_230, data = ger_df_long)
model_out <- lm(voteshare ~ chancellor_party + voteshare_l1 + polls_200_230, data = ger_df_long)
summary(model_out)
model_out_fit <- augment(model_out)
model_out_fit$party <- ger_df_long$party[as.numeric(model_out_fit$.rownames)]
model_out_fit$year <- ger_df_long$year[as.numeric(model_out_fit$.rownames)]
mean(abs(model_out_fit$.resid))
group_by(model_out_fit, party) %>% summarize(mae = mean(abs(.resid)))
plot(model_out_fit$.fitted, model_out_fit$voteshare, cex = .5, pch = 20)
text(model_out_fit$.fitted, model_out_fit$voteshare, paste0(model_out_fit$party, str_sub(as.character(model_out_fit$year), -2, -1)), pos = 3, offset = .15, cex = .6)
dev.off()
plot(model_out_fit$.fitted, model_out_fit$voteshare, cex = .5, pch = 20)
text(model_out_fit$.fitted, model_out_fit$voteshare, paste0(model_out_fit$party, str_sub(as.character(model_out_fit$year), -2, -1)), pos = 3, offset = .15, cex = .6)
grid()
abline(0, 1)
abline(v=0)
abline(h=0)
d <- select(ger_df_long, voteshare, voteshare_l1, voteshare_l1_3, polls_200_230, ltw_swing_mean_200_full, chancellor_party, major, gov, parl)
d <- select(ger_df_long, voteshare, voteshare_l1, voteshare_l1_3, polls_200_230,  chancellor_party, major, gov, parl)
dep_var <- 'voteshare'
indep_vars <- setdiff(names(d), dep_var)
lms <- Reduce(append, lapply(seq_along(indep_vars),
function(num_vars) {
Reduce(append, apply(combn(length(indep_vars), num_vars), 2, function(vars) {
formula_string <- paste(c(dep_var, paste(indep_vars[vars], collapse = "+")), collapse = '~')
structure(list(lm(as.formula(formula_string), data = d)), .Names = formula_string)
}))
}
))
length(lms)
lms
sum_tab <- data.frame(model_name = names(lms),
num_vars = sapply(lms, function(x) { x %>% .$coefficients %>% length}) - 1,
#df = sapply(lms, function(x) { summary(x) %>% .$df[2,]}),
r_squared = sapply(lms, function(x) { summary(x) %>% .$r.squared}),
adj_r_squared = sapply(lms, function(x) { summary(x) %>% .$adj.r.squared})
)
sum_tab$ratio <- sum_tab$r_squared / sum_tab$num_vars
i = 2017
lms_best <- lms[sum_tab$r_squared > .35]
lms_best_predictions <- sapply(lms_best, predict.lm, newdata = filter(ger_df_long, year == i)) %>% t() %>% as.data.frame()
lms_best_predictions <- apply(lms_best_predictions, 1, add, filter(ger_df_long, year == i)$voteshare_l1) %>% t() %>% as.data.frame
names(lms_best_predictions) <- filter(ger_df_long, year == i)$party
summary(lms_best_predictions)
lms_best_predictions$vote_sums <- rowSums(lms_best_predictions)
source("packages.r")
source("functions.r")
library(readr)
dir.create("data/spreadsheets")
readr_example("mtcars.csv")
mtcars <- read_csv(readr_example("mtcars.csv"))
head(mtcars)
write_csv(mtcars, "data/spreadsheets/mtcars-comma.csv")
write_delim(mtcars, delim = ";", path = "data/spreadsheets/mtcars-semicolon.csv")
mtcars <- read_csv2("data/spreadsheets/mtcars-semicolon.csv")
head(mtcars)
library(haven)
dir.create("data/stata")
write_dta(mtcars, "data/stata/mtcars.dta")
mtcars_stata <- read_dta("data/stata/mtcars.dta")
# traditional way of writing code
dat <- babynames
dim(dat)
dat_filtered <- filter(dat, name == "Kim")
dat_grouped <- group_by(dat_filtered, year, sex)
dat_sum <- summarize(dat_grouped, total = sum(n))
qplot(year, total, color = sex, data = dat_sum, geom = "line") +
ggtitle('People named "Kim"')
source("packages.r")
source("functions.r")
dat <- babynames
dim(dat)
dat_filtered <- filter(dat, name == "Kim")
dat_grouped <- group_by(dat_filtered, year, sex)
dat_sum <- summarize(dat_grouped, total = sum(n))
qplot(year, total, color = sex, data = dat_sum, geom = "line") +
ggtitle('People named "Kim"')
dat <- summarize(group_by(filter(babynames, name == "Kim"), year, sex), total = sum(n))
qplot(year, total, color = sex, data = dat, geom = "line") +  ggtitle('People named "Kim"')
babynames %>%
filter(name %>% equals("Kim")) %>%
group_by(year, sex) %>%
summarize(total = sum(n)) %>%
qplot(year, total, color = sex, data = ., geom = "line") %>%
add(ggtitle('People named "Kim"')) %>%
print
dat <- flights %>% as.data.frame
head(dat)
# filter observations
filter(dat, month == 1, day == 1) %>% head()
slice(dat, 1:10)
# arrange rows
arrange(dat, dep_time, arr_time) %>% head()
dat[order(dat$dep_time, dat$arr_time),] %>% head()
arrange(dat, desc(dep_time), arr_time)
# select variables
select(dat, year, month, day) %>% head
select(dat, year:day) %>% head
select(dat, -(year:day)) %>% head
select(dat, contains("time")) %>% head
# also possible: starts_with("abc"), ends_with("xyz"), matches("(.)\\1"), num_range("x", 1:3)
distinct(dat, tailnum) %>% head # similar to base::unique(), but faster
select(dat, tail_num = tailnum) %>% head
rename(dat, tail_num = tailnum) %>% head
mutate(dat, gain = arr_delay - dep_delay, speed = distance / air_time * 60) %>% head
mutate(dat, gain = arr_delay - dep_delay, gain_per_hour = gain / (air_time / 60)) %>% head # you can even refer to columns that you've created in the same call!
transmute(dat, gain = arr_delay - dep_delay, gain_per_hour = gain / (air_time / 60)) %>% head
summarize(dat, delay_mean = (mean(dep_delay, na.rm = TRUE)))
unique(dat$tailnum) %>% length
by_tailnum <- group_by(dat, tailnum)
class(by_tailnum)
delay <- summarize(by_tailnum,
count = n(),
dist = mean(distance, na.rm = TRUE),
delay = mean(arr_delay, na.rm = TRUE))
delay <- filter(delay, count > 20, dist < 2000)
ggplot(delay, aes(dist, delay)) +
geom_point(aes(size = count), alpha = 1/2) +
geom_smooth() +
scale_size_area()
# useful functions to feed summarize with
destinations <- group_by(dat, dest)
summarize(destinations,
planes = n_distinct(tailnum), # equivalent to length(unique(x))
flights = n()
)
# numeric vectors
x <- c(4,8,15,16,23,42)
x
mode(x)
length(x)
summary(x)
# character vectors
countries <- c("Germany", "France", "Netherlands", "Belgium")
countries
paste(countries, collapse = " ")
paste("Hello", "world!", sep = " ")
paste0("Hello", "world!")
c(countries, "Poland")
mode(countries)
# logical vectors
x > 15
x == sqrt(225)
# logical and relational operators
# <,>,>=,<=,==,!=, is.na(), & (logical AND), | (logical OR), ! (logical NOT)
# missing values
y <- c(1,10,NA,7,NA,11)
sum(y)
sum(y, na.rm = TRUE)
!is.na(y) # not: y == NA
y*3
# seq and rep
seq(1, 10, 2)
seq_along(x)
rep(c(1, 2, 3), 2)
rep(c(1, 2, 3), each = 2)
# sorting
vec1 <- c(2, 20, -5, 1, 200)
vec2 <- seq(1, 5)
sort(vec1, decreasing = FALSE)
order(vec1, decreasing = FALSE)
vec2[order(vec1)]
vec3 <- c(1,10,NA,7,NA,11)
vec4 <- vec3[!is.na(vec3)]
vec4
# vectors with mixed element types are not possible
z <- c(1,2,"Bavaria", 4)
z
str(z)
# variables
zz <- c(1,2,Bavaria,4,5,6) # error
Bavaria <- 3
zz <- c(1,2,Bavaria,4,5,6)
zz
str(zz)
# transform vector type
zzchar <- as.character(zz)
zznum <- as.numeric(zzchar)
# combine vectors
xzz <- c(x,zz)
# subsetting
countries[2]
xzz[1:6] # xzz[seq(1,6)], xzz[c(1,2,3,4,5,6)]
xzz[c(2, 5, 10)]
xzz[-1]
xzz[Hessen]
xzz[seq(0, 10, by = 2)]
xzz[c(TRUE, FALSE, TRUE, TRUE, FALSE, TRUE, TRUE, FALSE, FALSE, FALSE)]
y
y[is.na(y)]
y[!is.na(y)]
y[y>5 | !is.na(y)]
countries
countries[3] <- "Switzerland"
countries
xzz
xzz[c(1 ,3 ,5 )] <- c(100,110,120)
xzz_new <- xzz
xzz_new[xzz <= 100] <- 0
xzz_new[xzz > 100] <- 1
xzz_new
# ************************************************
# BASIC DATA TIDYING -----------------------------
# clean variable names
# only lowercase letters, with _ as separator
# handles special characters and spaces
# appends numbers to duplicated names
foo_df <- as.data.frame(matrix(ncol = 6))
names(foo_df) <- c("hIgHlo", "REPEAT VALUE", "REPEAT VALUE", "% successful (2009)",  "abc@!*", "")
foo_df
janitor::clean_names(foo_df)
make.names(names(foo_df)) # base R solution - not very convincing
# convert multiple values to NA
convert_to_NA(letters[1:5], c("b", "d"))
convert_to_NA(sample(c(1:5, 98, 99), 20, replace = TRUE), c(98,99))
# clean frequency tables
head(mtcars)
table(mtcars$cyl)
janitor::tabyl(mtcars$cyl, show_na = TRUE, sort = TRUE)
janitor::tabyl(mtcars$cyl, show_na = TRUE, sort = TRUE) %>% add_totals_row()
# clean cross tabulations
mtcars %$% table(cyl, gear)
mtcars %>% janitor::crosstab(cyl, gear)
mtcars %>% janitor::crosstab(cyl, gear) %>% adorn_crosstab(denom = "row", show_totals = TRUE)
## example: linear model output
model_out <- lm(mpg ~ wt, mtcars) # linear relationship between miles/gallon and weight (in 1000 lbs)
model_out
summary(model_out)
# examine model object
str(model_out)
coef(summary(model_out)) # matrix of coefficients with variable terms in row names
broom::tidy(model_out)
# add fitted values and residuals to original data
broom::augment(model_out) %>% head
?augment.lm
# inspect summary statistics
broom::glance(model_out)
?glance.lm
# many supported models; see
?tidy # ... and click on "index"
# the true power of broom unfolds in settings where you want to combine results from multiple analyses (using subgroups of data, different models, bootstrap replicates of the original data frame, permutations, imputations, ...)
data(Orange)
Orange
# inspect relationship between age and circumference
cor(Orange$age, Orange$circumference)
ggplot(Orange, aes(age, circumference, color = Tree)) + geom_line()
# using broom and dplyr together works like a charm
Orange %>% group_by(Tree) %>% summarize(correlation = cor(age, circumference))
cor.test(Orange$age, Orange$circumference)
Orange %>% group_by(Tree) %>% do(tidy(cor.test(.$age, .$circumference)))
# also works for regressions
Orange %>% group_by(Tree) %>% do(tidy(lm(age ~ circumference, data=.)))
a <- matrix(1:20, nrow = 5)
apply(a, 1, mean)
apply(a, 2, mean)
lapply(mtcars, is.numeric)
sapply(mtcars, is.numeric)
# example: computation of mean vs. weighted mean
xs <- replicate(5, runif(10), simplify = FALSE)
ws <- replicate(5, rpois(10, 5) + 1, simplify = FALSE)
vapply(xs, mean, numeric(1))
Map(weighted.mean, xs, ws) %>% unlist
Map(function(x, w) weighted.mean(x, w, na.rm = TRUE), xs, ws)
dat <- data.frame(x = 1:20, y = rep(letters[1:5], each = 4))
tapply(dat$x, dat$y, sum) # data, index, function
