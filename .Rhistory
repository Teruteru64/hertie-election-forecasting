View(GfK)
GfK <- read.csv('~/hertie-election-forecasting (Akira)/history.csv')
View(GfK)
df1 <- merge(df, GfK, by = "Date")
View(df1)
eco.in <- merge(df, GfK, by = "Date")
View(df1)
View(eco.in)
ggplot(econ.in, aes(Date, AdjClose))
ggplot(eco.in, aes(Date, AdjClose))
ggplot(eco.in, aes(Date, Adj Close))
ggplot(eco.in, aes(Date, AdjClose))
ggplot(eco.in, aes(Date, Adj Close))
ggplot(eco.in, aes(Date, "Adj Close"))
ggplot(eco.in, aes(Date, `Adj Close`))
ggplot(eco.in, aes(Date, `Adj Close`)) + geom_line()
ggplot(eco.in, aes(Date, `Adj Close`)) + geom_line(mapping = aes(x = Date, y = `Adj Close`))
ggplot(eco.in) + geom_line(mapping = aes(x = Date, y = `Adj Close`))
ggplot(eco.in, aes(x = Date, y = `Adj Close`)) + geom_line()
ggplot(eco.in, aes(x = 'Date', y = 'Adj Close')) + geom_line()
ggplot(eco.in, aes(x = Date, y = `Adj Close`)) + geom_line()
ggplot(eco.in, aes(x = as.Date(Date), y = `Adj Close`)) + geom_line()
ggplot(eco.in, aes(x = as.Date(Date), y = Close,y)) + geom_line()
ggplot(eco.in, aes(x = as.Date(Date), y = Close.y)) + geom_line()
library(gtable)
library(grid)
library(extrafont)
install.packages("extrafont")
install.packages("extrafont")
library(extrafont)
p1 <- ggplot(eco.in, aes(x = as.Date(Date), y = Close.y)) + geom_line(colour = "#68382C", size = 1.5)
p1 <- p1 + theme(panel.grid.minor = element_blank(),
panel.grid.major = element_line(color = "gray50", size = 0.5),
panel.grid.major.x = element_blank())
p1
p1 <- p1 + theme(panel.background = element_blank())
p1
p1 <- p1 + scale_x_continuous(breaks= c(2007, seq(2008,2017,2)))
p1
p1 <- ggplot(eco.in, aes(x = as.Date(Date), y = Close.y)) + geom_line(colour = "#68382C", size = 1.5)
p1 <- p1 + theme(panel.grid.minor = element_blank(),
panel.grid.major = element_line(color = "gray50", size = 0.5),
panel.grid.major.x = element_blank())
p1 <- p1 + theme(panel.background = element_blank())
p1 <- p1 + scale_x_continuous(breaks= c(2007, seq(2008,2017,2)))
p1
p1 <- ggplot(eco.in, aes(x = as.Date(Date), y = Close.y)) + geom_line(colour = "#68382C", size = 1.5)
p1 <- p1 + theme(panel.grid.minor = element_blank(),
panel.grid.major = element_line(color = "gray50", size = 0.5),
panel.grid.major.x = element_blank())
p1 <- p1 + theme(panel.grid.minor = element_blank(),
panel.grid.major = element_line(color = "gray50", size = 0.5),
panel.grid.major.x = element_blank())
p1 <- p1 + theme(panel.background = element_blank())
p1
p1 <- p1 + scale_x_continuous(breaks= c(2007, seq(2008,2017,2)))
p1
p1 <- p1 + scale_x_continuous(breaks= c(2007-03-28, seq(2008,2017,2)))
p1
p1 <- ggplot(eco.in, aes(x = as.Date(Date), y = Close.y)) + geom_line(colour = "#68382C", size = 1.5)
p1 <- p1 + theme(panel.grid.minor = element_blank(),
panel.grid.major = element_line(color = "gray50", size = 0.5),
panel.grid.major.x = element_blank())
p1 <- p1 + theme(panel.background = element_blank())
p1
p1 <- p1 + ggtitle("CDAX\n") + labs(x=NULL, y= NULL)
theme(plot.title = element_text(hjust = -0.16, vjust=2.12, colour="#68382C", size = 14))
p1
install.packages("extrafont")
install.packages("extrafont")
p1 <- ggplot(eco.in, aes(x = as.Date(Date), y = Close.y)) + geom_line(colour = "#68382C", size = 1.5) + theme(panel.grid.minor = element_blank(),
panel.grid.major = element_line(color = "gray50", size = 0.5),
panel.grid.major.x = element_blank()) + theme(panel.background = element_blank()) + ggtitle("CDAX\n") + labs(x=NULL, y= NULL)
theme(plot.title = element_text(hjust = -0.16, vjust=2.12, colour="#68382C", size = 14))
p1
p2 <- ggplot(eco.in, aes(x = as.Date(Date), y = Actual)) + geom_line(colour = "#00A4E6", size = 1.5) + theme(panel.grid.minor = element_blank(),
panel.grid.major = element_line(color = "gray50", size = 0.5),
panel.grid.major.x = element_blank()) + theme(panel.background = element_blank()) + ggtitle("GfK Consumer Confidence\n") + labs(x=NULL, y= NULL)
theme(plot.title = element_text(hjust = -0.16, vjust=2.12, colour="#68382C", size = 14))
p2
p2 <- ggplot(eco.in, aes(x = as.Date(Date), y = Actual)) + geom_line(colour = "#00A4E6", size = 1.5) + theme(panel.grid.minor = element_blank(),
panel.grid.major = element_line(color = "gray50", size = 0.5),
panel.grid.major.x = element_blank()) + theme(panel.background = element_blank()) + ggtitle("GfK Consumer Confidence\n") + labs(x=NULL, y= NULL)
theme(plot.title = element_text(hjust = -0.16, vjust=2.12, colour="#68382C", size = 14)) + scale_y_continuous(expand = c(0, 0), limits = c(-0.9,10.9))
p2 <- ggplot(eco.in, aes(x = as.Date(Date), y = Actual)) + geom_line(colour = "#00A4E6", size = 1.5) + theme(panel.grid.minor = element_blank(),
panel.grid.major = element_line(color = "gray50", size = 0.5),
panel.grid.major.x = element_blank()) + theme(panel.background = element_blank()) + ggtitle("GfK Consumer Confidence\n") + labs(x=NULL, y= NULL) + scale_y_continuous(expand = c(0, 0), limits = c(-0.9,10.9))
theme(plot.title = element_text(hjust = -0.16, vjust=2.12, colour="#68382C", size = 14))
p2
p2 <- ggplot(eco.in, aes(x = as.Date(Date), y = Actual)) + geom_line(colour = "#00A4E6", size = 1.5) + theme(panel.grid.minor = element_blank(),
panel.grid.major = element_line(color = "gray50", size = 0.5),
panel.grid.major.x = element_blank()) + theme(panel.background = element_blank()) + ggtitle("GfK Consumer Confidence\n") + labs(x=NULL, y= NULL) + scale_y_continuous(expand = c(0, 0), limits = c(-0.0,10.9))
theme(plot.title = element_text(hjust = -0.16, vjust=2.12, colour="#68382C", size = 14))
p2
# Get the plot grobs
g1 <- ggplotGrob(p1)
g2 <- ggplotGrob(p2)
# Get the locations of the plot panels in g1.
pp <- c(subset(g1$layout, name == "panel", se = t:r))
# Overlap panel for second plot on that of the first plot
g1 <- gtable_add_grob(g1, g2$grobs[[which(g2$layout$name == "panel")]], pp$t, pp$l, pp$b, pp$l)
# ggplot contains many labels that are themselves complex grob;
# usually a text grob surrounded by margins.
# When moving the grobs from, say, the left to the right of a plot,
# make sure the margins and the justifications are swapped around.
# The function below does the swapping.
# Taken from the cowplot package:
# https://github.com/wilkelab/cowplot/blob/master/R/switch_axis.R
hinvert_title_grob <- function(grob){
# Swap the widths
widths <- grob$widths
grob$widths[1] <- widths[3]
grob$widths[3] <- widths[1]
grob$vp[[1]]$layout$widths[1] <- widths[3]
grob$vp[[1]]$layout$widths[3] <- widths[1]
# Fix the justification
grob$children[[1]]$hjust <- 1 - grob$children[[1]]$hjust
grob$children[[1]]$vjust <- 1 - grob$children[[1]]$vjust
grob$children[[1]]$x <- unit(1, "npc") - grob$children[[1]]$x
grob
}
# Get the y axis from g2 (axis line, tick marks, and tick mark labels)
index <- which(g2$layout$name == "axis-l")  # Which grob
yaxis <- g2$grobs[[index]]                  # Extract the grob
# yaxis is a complex of grobs containing the axis line, the tick marks, and the tick mark labels.
# The relevant grobs are contained in axis$children:
#   axis$children[[1]] contains the axis line;
#   axis$children[[2]] contains the tick marks and tick mark labels.
# Second, swap tick marks and tick mark labels
ticks <- yaxis$children[[2]]
ticks$widths <- rev(ticks$widths)
ticks$grobs <- rev(ticks$grobs)
# Third, move the tick marks
# Tick mark lengths can change.
# A function to get the original tick mark length
# Taken from the cowplot package:
# https://github.com/wilkelab/cowplot/blob/master/R/switch_axis.R
plot_theme <- function(p) {
plyr::defaults(p$theme, theme_get())
}
tml <- plot_theme(p1)$axis.ticks.length   # Tick mark length
ticks$grobs[[1]]$x <- ticks$grobs[[1]]$x - unit(1, "npc") + tml
# Fourth, swap margins and fix justifications for the tick mark labels
ticks$grobs[[2]] <- hinvert_title_grob(ticks$grobs[[2]])
# Fifth, put ticks back into yaxis
yaxis$children[[2]] <- ticks
# Put the transformed yaxis on the right side of g1
g1 <- gtable_add_cols(g1, g2$widths[g2$layout[index, ]$l], pp$r)
g1 <- gtable_add_grob(g1, yaxis, pp$t, pp$r + 1, pp$b, pp$r + 1, clip = "off", name = "axis-r")
# Labels grob
left = textGrob("CDAX", x = 0, y = 0.9, just = c("left", "top"), gp = gpar(fontsize = 14, col =  "#68382C"))
right =  textGrob("GfK", x = 1, y = 0.9, just = c("right", "top"), gp = gpar(fontsize = 14, col =  "#00a4e6"))
labs = gTree("Labs", children = gList(left, right))
# New row in the gtable for labels
height = unit(3, "grobheight", left)
g1 <- gtable_add_rows(g1, height, 2)
# Put the label in the new row
g1 = gtable_add_grob(g1, labs, t=3, l=3, r=5)
# Turn off clipping in the plot panel
g1$layout[which(g1$layout$name == "panel"), ]$clip = "off"
ggsave("plot.pdf", g1, width=5, height=5)
g1
g1 <- ggplotGrob(p1)
g2 <- ggplotGrob(p2)
pp <- c(subset(g1$layout, name == "panel", se = t:r))
g1 <- gtable_add_grob(g1, g2$grobs[[which(g2$layout$name == "panel")]], pp$t, pp$l, pp$b, pp$l)
hinvert_title_grob <- function(grob){
# Swap the widths
widths <- grob$widths
grob$widths[1] <- widths[3]
grob$widths[3] <- widths[1]
grob$vp[[1]]$layout$widths[1] <- widths[3]
grob$vp[[1]]$layout$widths[3] <- widths[1]
# Fix the justification
grob$children[[1]]$hjust <- 1 - grob$children[[1]]$hjust
grob$children[[1]]$vjust <- 1 - grob$children[[1]]$vjust
grob$children[[1]]$x <- unit(1, "npc") - grob$children[[1]]$x
grob
}
index <- which(g2$layout$name == "axis-l")  # Which grob
yaxis <- g2$grobs[[index]]                  # Extract the grob
plot_theme <- function(p) {
plyr::defaults(p$theme, theme_get())
}
tml <- plot_theme(p1)$axis.ticks.length   # Tick mark length
ticks$grobs[[1]]$x <- ticks$grobs[[1]]$x - unit(1, "npc") + tml
ticks$grobs[[2]] <- hinvert_title_grob(ticks$grobs[[2]])
yaxis$children[[2]] <- ticks
g1 <- gtable_add_cols(g1, g2$widths[g2$layout[index, ]$l], pp$r)
g1 <- gtable_add_grob(g1, yaxis, pp$t, pp$r + 1, pp$b, pp$r + 1, clip = "off", name = "axis-r")
left = textGrob("CDAX", x = 0, y = 0.9, just = c("left", "top"), gp = gpar(fontsize = 14, col =  "#68382C"))
right =  textGrob("GfK", x = 1, y = 0.9, just = c("right", "top"), gp = gpar(fontsize = 14, col =  "#00a4e6"))
labs = gTree("Labs", children = gList(left, right))
height = unit(3, "grobheight", left)
g1 <- gtable_add_rows(g1, height, 2)
g1 = gtable_add_grob(g1, labs, t=3, l=3, r=5)
g <- g1$layout[which(g1$layout$name == "panel"), ]$clip = "off"
g1$layout[which(g1$layout$name == "panel"), ]$clip = "off"
g1
conflicts(detail=TRUE)
df <- merge(DAX, CDAX, by = "Date")
eco.in <- merge(df, GfK, by = "Date")
eco.in <- merge(CDAX, GfK, by = "Date")
plot1 <- eco.in %>%
select(Date, Close.y) %>%
na.omit() %>%
ggplot() +
geom_point(aes(x = as.Date(Date), y = Close.y), size = 0.5, alpha = 0.75) +
ylab("Red dots / m") +
theme_minimal() +
theme(axis.title.x = element_blank())
plot1 <- eco.in %>%
select(Date, Close) %>%
na.omit() %>%
ggplot() +
geom_point(aes(x = as.Date(Date), y = Close), size = 0.5, alpha = 0.75) +
ylab("Red dots / m") +
theme_minimal() +
theme(axis.title.x = element_blank())
plot1
plot1 <- eco.in %>%
select(Date, Close) %>%
na.omit() %>%
ggplot() +
geom_line(aes(x = as.Date(Date), y = Close), size = 0.5, alpha = 0.75) +
ylab("Red dots / m") +
theme_minimal() +
theme(axis.title.x = element_blank())
plot1
plot2 <- df %>%
select(Date, Actual) %>%
na.omit() %>%
ggplot() +
geom_point(aes(x = Date, y = Actual), size = 0.5, alpha = 0.75) +
ylab("GfK Consumer Confidence") +
theme_minimal() +
theme(axis.title.x = element_blank())
plot2 <- eco.in %>%
select(Date, Actual) %>%
na.omit() %>%
ggplot() +
geom_point(aes(x = Date, y = Actual), size = 0.5, alpha = 0.75) +
ylab("GfK Consumer Confidence") +
theme_minimal() +
theme(axis.title.x = element_blank())
grid.newpage()
grid.draw(rbind(ggplotGrob(plot1), ggplotGrob(plot2), size = "last"))
g.bottom <- ggplot(eco.in, aes(x = Date, y = Close)) +
geom_line() +  #plot CDAX
geom_line(aes(y = GfK), colour = "blue", size =1.5) +  # plot GfK
## specify our yaxis limits and remove any axis expansion
scale_y_continuous(expand = c(0,0), limits = c(0,1000)) +
labs(x = "Date", y = "CDAX") +
theme_classic() +
theme(plot.background = element_rect(fill = "transparent"),
plot.margin = unit(c(2,0,1,1),units="lines"))
g.bottom
g.bottom <- ggplot(eco.in, aes(x = Date, y = Close)) +
geom_line() +  #plot CDAX
geom_line(aes(y = GfK), colour = "blue", size =1.5) +  # plot GfK
## specify our yaxis limits and remove any axis expansion
scale_y_continuous(expand = c(0,0), limits = c(1,1000)) +
labs(x = "Date", y = "CDAX") +
theme_classic() +
theme(plot.background = element_rect(fill = "transparent"),
plot.margin = unit(c(2,0,1,1),units="lines"))
g.bottom
library(gtable)
grid.newpage()
p1 <- ggplot(eco.in, aes(Date, Close)) + geom_line(colour = "blue") + theme_bw()
p2 <- ggplot(eco.ins, aes(Date, Actual)) + geom_line(colour = "red") + theme_bw() %+replace%
theme(panel.background = element_rect(fill = NA))
# extract gtable
g1 <- ggplot_gtable(ggplot_build(p1))
g2 <- ggplot_gtable(ggplot_build(p2))
p1 <- ggplot(eco.in, aes(Date, Close)) + geom_line(colour = "blue") + theme_bw()
p2 <- ggplot(eco.in, aes(Date, Actual)) + geom_line(colour = "red") + theme_bw() %+replace%
theme(panel.background = element_rect(fill = NA))
g1 <- ggplot_gtable(ggplot_build(p1))
g2 <- ggplot_gtable(ggplot_build(p2))
pp <- c(subset(g1$layout, name == "panel", se = t:r))
g <- gtable_add_grob(g1, g2$grobs[[which(g2$layout$name == "panel")]], pp$t,
pp$l, pp$b, pp$l)
ia <- which(g2$layout$name == "axis-l")
ga <- g2$grobs[[ia]]
ax <- ga$children[[2]]
ax$widths <- rev(ax$widths)
ax$grobs <- rev(ax$grobs)
ax$grobs[[1]]$x <- ax$grobs[[1]]$x - unit(1, "npc") + unit(0.15, "cm")
g <- gtable_add_cols(g, g2$widths[g2$layout[ia, ]$l], length(g$widths) - 1)
g <- gtable_add_grob(g, ax, pp$t, length(g$widths) - 1, pp$b)
grid.draw(g)
grid.draw(g)
ia <- which(g2$layout$name == "axis-l")
ga <- g2$grobs[[ia]]
ax <- ga$children[[2]]
ax$widths <- rev(ax$widths)
ax$grobs <- rev(ax$grobs)
ax$grobs[[1]]$x <- ax$grobs[[1]]$x - unit(100) + unit(1)
g <- gtable_add_cols(g, g2$widths[g2$layout[ia, ]$l], length(g$widths) - 1)
g <- gtable_add_grob(g, ax, pp$t, length(g$widths) - 1, pp$b)
?unit
ia <- which(g2$layout$name == "axis-l")
ga <- g2$grobs[[ia]]
ax <- ga$children[[2]]
ax$widths <- rev(ax$widths)
ax$grobs <- rev(ax$grobs)
ax$grobs[[1]]$x <- ax$grobs[[1]]$x - unit(100, "npc") + unit(1, "npc")
g <- gtable_add_cols(g, g2$widths[g2$layout[ia, ]$l], length(g$widths) - 1)
g <- gtable_add_grob(g, ax, pp$t, length(g$widths) - 1, pp$b)
grid.draw(g)
g1 <- ggplot_gtable(ggplot_build(p1))
g2 <- ggplot_gtable(ggplot_build(p2))
# overlap the panel of 2nd plot on that of 1st plot
pp <- c(subset(g1$layout, name == "panel", se = t:r))
g <- gtable_add_grob(g1, g2$grobs[[which(g2$layout$name == "panel")]], pp$t,
pp$l, pp$b, pp$l)
# axis tweaks
ia <- which(g2$layout$name == "axis-l")
ga <- g2$grobs[[ia]]
ax <- ga$children[[2]]
ax$widths <- rev(ax$widths)
ax$grobs <- rev(ax$grobs)
ax$grobs[[1]]$x <- ax$grobs[[1]]$x - unit(100, "npc") + unit(1, "npc")
g <- gtable_add_cols(g, g2$widths[g2$layout[ia, ]$l], length(g$widths) - 1)
g <- gtable_add_grob(g, ax, pp$t, length(g$widths) - 1, pp$b)
# draw it
grid.draw(g)
?par
?mar
par(mar = c(5,5,2,5))
with(eco.in, plot(Date, Close, type="l", col="red3",
ylab=expression(CDAX)),
ylim=c(0,1200))
?plot
with(eco.in, plot(Date, Close, type="l", col="red3",
ylab=expression(CDAX)),
ylim=c(0,1200))
with(eco.in, plot(as.Date(Date), Close, type="l", col="red3",
ylab=expression(CDAX)),
ylim=c(0,1200))
?plot
?pch
par(mar = c(5,5,2,5))
with(eco.in, plot(as.Date(Date), Close, type="l", col="red3",
ylab=expression(CDAX)),
ylim=c(0,1200))
par(new = T)
with(eco.in, plot(as.Date(Date), Actual, ?pch=16, axes=F, xlab=NA, ylab=NA, cex=1.2))
axis(side = 4)
mtext(side = 4, line = 3, 'GfK Consumer Confidence')
legend("topleft",
legend=c(expression(CDAX), "GfK Consumer Confidence"),
lty=c(1,0), pch=c(NA, 16), col=c("red3", "black"))
par(mar = c(5,5,2,5))
with(eco.in, plot(as.Date(Date), Close, type="l", col="red3",
ylab=expression(CDAX)),
ylim=c(0,1200))
par(new = T)
with(eco.in, plot(as.Date(Date), Actual, pch=16, axes=F, xlab=NA, ylab=NA, cex=1.2))
axis(side = 4)
mtext(side = 4, line = 3, 'GfK Consumer Confidence')
legend("topleft",
legend=c(expression(CDAX), "GfK Consumer Confidence"),
lty=c(1,0), pch=c(NA, 16), col=c("red3", "black"))
par(mar = c(5,5,2,5))
with(eco.in, plot(as.Date(Date), Close, type="l", col="red3",
ylab=expression(CDAX)),
ylim=c(0,1200))
par(new = T)
with(eco.in, plot(as.Date(Date), Actual, type="l", col="blue3", xlab=NA, ylab=NA, cex=1.2))
axis(side = 4)
mtext(side = 4, line = 3, 'GfK Consumer Confidence')
legend("topleft",
legend=c(expression(CDAX), "GfK Consumer Confidence"),
lty=c(1,0),col=c("red3", "blue3"))
par(mar = c(5,5,2,5))
with(eco.in, plot(as.Date(Date), Close, type="l", col="red3",
ylab=expression(CDAX)),
ylim=c(0,1200))
par(new = T)
with(eco.in, plot(as.Date(Date), Actual, type="l", col="blue3", xlab=NA, ylab=NA, cex=1.2))
axis(side = 4)
mtext(side = 4, line = 3, 'GfK Consumer Confidence')
par(new = T)
with(eco.in, plot(as.Date(Date), Actual, type="l", col="blue3", xlab=NA, ylab=NA, cex=1.2))
axis(side = 4)
mtext(side = 4, line = 3, 'GfK Consumer Confidence')
legend("topleft",
legend=c(expression(CDAX), "GfK Consumer Confidence"),
lty=c(1,0), pch=c(NA, 16), col=c("red3", "blue3"))
legend("topleft",
legend=c(expression(CDAX), "GfK Consumer Confidence"),
lty=c(1,0), col=c("red3", "blue3"))
par(mar = c(5,5,2,5))
with(eco.in, plot(as.Date(Date), Close, type="l", col="red3",
ylab=expression(CDAX)),
ylim=c(0,1200))
par(new = T)
with(eco.in, plot(as.Date(Date), Actual, type="l", col="blue3", xlab=NA, ylab=NA, cex=1.2))
axis(side = 4)
mtext(side = 4, line = 3, 'GfK Consumer Confidence')
legend("topleft",
legend=c(expression(CDAX), "GfK Consumer Confidence"),
lty=c(1,0), pch=c(NA, 16), col=c("red3", "blue3"))
legend("topleft",
legend=c(expression(CDAX), "GfK Consumer Confidence"),
lty=c(1,0), lty=c(1,0), col=c("red3", "blue3"))
par(mar = c(5,5,2,5))
with(eco.in, plot(as.Date(Date), Close, type="l", col="red3",
ylab=expression(CDAX)),
ylim=c(0,1200))
par(new = T)
with(eco.in, plot(as.Date(Date), Actual, type="l", col="blue3", xlab=NA, ylab=NA, cex=1.2))
axis(side = 4)
mtext(side = 4, line = 3, 'GfK Consumer Confidence')
legend("topleft",
legend=c(expression(CDAX), "GfK Consumer Confidence"),
lty=c(1,0), lty=c(1,0), col=c("red3", "blue3"))
par(mar = c(5,5,2,5))
with(eco.in, plot(as.Date(Date), Close, type="l", col="red3",
ylab=expression(CDAX)),
ylim=c(0,1200))
par(new = T)
with(eco.in, plot(as.Date(Date), Actual, type="l", col="blue3", xlab=NA, ylab=NA, cex=1.2))
axis(side = 4)
mtext(side = 4, line = 3, 'GfK Consumer Confidence')
legend("topleft",
legend=c(expression(CDAX), "GfK Consumer Confidence"),
lty=c(1,0), col=c("red3", "blue3"))
par(mar = c(5,5,2,5))
with(eco.in, plot(as.Date(Date), Close, type="l", col="red3",
ylab=expression(CDAX)),
ylim=c(0,1200))
par(new = T)
with(eco.in, plot(as.Date(Date), Actual, type="l", col="blue3", xlab="Year", ylab=NA, cex=1.2))
axis(side = 4)
mtext(side = 4, line = 2, 'GfK Consumer Confidence')
legend("topleft",
legend=c(expression(CDAX), "GfK Consumer Confidence"),
lty=c(1,0), col=c("red3", "blue3"))
par(mar = c(5,5,2,5))
with(eco.in, plot(as.Date(Date), Close, type="l", col="red3",
xlab="Year", ylab=expression(CDAX)),
ylim=c(0,1200))
par(new = T)
with(eco.in, plot(as.Date(Date), Actual, type="l", col="blue3", xlab="Year", ylab=NA, cex=1.2))
axis(side = 4)
mtext(side = 4, line = 2, 'GfK Consumer Confidence')
legend("topleft",
legend=c(expression(CDAX), "GfK Consumer Confidence"),
lty=c(1,0), col=c("red3", "blue3"))
with(eco.in, plot(as.Date(Date), Actual, type="l", col="blue3", xlab="Year", ylab=NA, cex=1.2))
axis(side = 4)
with(eco.in, plot(as.Date(Date), Actual, type="l", col="blue3", xlab="Year", ylab=NA, cex=1.2))
with(eco.in, plot(as.Date(Date), Actual, type="l", axes=F,, col="blue3", xlab="Year", ylab=NA, cex=1.2))
par(mar = c(5,5,2,5))
with(eco.in, plot(as.Date(Date), Close, type="l", col="red3",
xlab="Year", ylab=expression(CDAX)),
ylim=c(0,1200))
par(new = T)
with(eco.in, plot(as.Date(Date), Actual, type="l", axes=F,, col="blue3", xlab="Year", ylab=NA, cex=1.2))
axis(side = 4)
mtext(side = 4, line = 3, 'GfK Consumer Confidence')
legend("topleft",
legend=c(expression(CDAX), "GfK Consumer Confidence"),
lty=c(1,0), col=c("red3", "blue3"))
?legend
par(mar = c(5,5,2,5))
with(eco.in, plot(as.Date(Date), Close, type="l", col="red3",
xlab="Year", ylab=expression(CDAX)),
ylim=c(0,1200))
par(new = T)
with(eco.in, plot(as.Date(Date), Actual, type="l", axes=F,, col="blue3", xlab="Year", ylab=NA, cex=1.2))
axis(side = 4)
mtext(side = 4, line = 3, 'GfK Consumer Confidence')
?legend("topleft",
legend=c(expression(CDAX), "GfK Consumer Confidence"),
lty=c(1,0), col=c("red3", "blue3"), cex=0.5)
par(mar = c(5,5,2,5))
with(eco.in, plot(as.Date(Date), Close, type="l", col="red3",
xlab="Year", ylab=expression(CDAX)),
ylim=c(0,1200))
par(new = T)
with(eco.in, plot(as.Date(Date), Actual, type="l", axes=F, col="blue3", xlab="Year", ylab=NA, cex=1.2))
axis(side = 4)
mtext(side = 4, line = 3, 'GfK Consumer Confidence')
?legend("topleft",
legend=c(expression(CDAX), "GfK Consumer Confidence"),
lty=1:1, col=c("red3", "blue3"))
```{r plot, include=TRUE, echo=TRUE}
par(mar = c(5,5,2,5))
with(eco.in, plot(as.Date(Date), Close, type="l", col="red3",
xlab="Year", ylab=expression(CDAX)),
ylim=c(0,1200))
par(new = T)
with(eco.in, plot(as.Date(Date), Actual, type="l", axes=F, col="blue3", xlab="Year", ylab=NA, cex=1.2))
axis(side = 4)
mtext(side = 4, line = 3, 'GfK Consumer Confidence')
legend("topleft",
legend=c(expression(CDAX), "GfK Consumer Confidence"),
lty=1:1, cex=0.39, col=c("red3", "blue3"))
GDP <- read.csv('~/hertie-election-forecasting (Akira)/DP_LIVE_26042017111042979.csv')
GDP <- read.csv('~/hertie-election-forecasting (Akira)/DP_LIVE_26042017111042979.csv')
GfK <- read.csv('~/hertie-election-forecasting (Akira)/history.csv')
rm(list = ls())
git checkout style
git merge master
View(by_tailnum)
View(CDAX)
View(DAX)
load("~/hertie-election-forecasting (Akira)/.RData")
